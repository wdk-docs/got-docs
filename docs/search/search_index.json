{"config":{"lang":["ja"],"separator":"[\\/\\s\\-\\.]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Got \u6587\u6863","text":"<p>\u4eba\u6027\u5316\u548c\u5f3a\u5927\u7684 Node.js HTTP \u8bf7\u6c42\u5e93</p> <p> </p> <p>\u4e86\u89e3 get \u4e0e\u5176\u4ed6 HTTP \u5e93\u7684\u6bd4\u8f83</p> <p>\u5bf9\u4e8e\u6d4f\u89c8\u5668\u4f7f\u7528\uff0c\u6211\u4eec\u63a8\u8350\u540c\u6837\u7684\u4ebaKy\u3002</p> <p>\u652f\u6301\u95ee\u9898\u5e94\u8be5\u95ee\u8fd9\u91cc.</p>"},{"location":"#_1","title":"\u5b89\u88c5","text":"<pre><code>npm install got\n</code></pre> <p>Warning</p> <p>\u8fd9\u4e2a\u5305\u662f\u539f\u751f\u7684ESM\uff0c\u4e0d\u518d\u63d0\u4f9bCommonJS\u5bfc\u51fa\u3002 \u5982\u679c\u4f60\u7684\u9879\u76ee\u4f7f\u7528CommonJS\uff0c\u4f60\u5c06\u4e0d\u5f97\u4e0d\u8f6c\u6362\u4e3aESM\u6216\u4f7f\u7528dynamic  <code>import()</code> \u51fd\u6570\u3002 \u8bf7\u4e0d\u8981\u6253\u5f00\u5173\u4e8eCommonJS / ESM\u7684\u95ee\u9898\u3002 \u6211\u4eec\u53ea\u4f1a\u5c06\u5173\u952e\u7684\u5b89\u5168\u95ee\u9898\u79fb\u690d\u5230Got v11\uff0c\u800c\u4e0d\u662f\u529f\u80fd\u6216\u9519\u8bef\u4fee\u590d\u3002</p>"},{"location":"#_2","title":"\u770b\u4e00\u773c","text":"<p>\u5feb\u901f\u5165\u95e8\u6307\u5357\u53ef\u7528\u3002</p>"},{"location":"#json-mode","title":"JSON mode","text":"<p>Got \u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u9009\u9879\u6765\u5904\u7406 JSON \u6709\u6548\u8d1f\u8f7d \u6b64\u5916\uff0cpromise \u66b4\u9732\u4e86\u4e00\u4e2a<code>.json&lt;T&gt;()</code>\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u8fd4\u56de <code>Promise&lt;T&gt;</code>\u3002</p> <pre><code>import got from \"got\";\nconst { data } = await got\n.post(\"https://httpbin.org/anything\", {\njson: {\nhello: \"world\",\n},\n})\n.json();\nconsole.log(data);\n//=&gt; {\"hello\": \"world\"}\n</code></pre> <p>\u5bf9\u4e8e\u9ad8\u7ea7 JSON \u7528\u6cd5\uff0c\u8bf7\u67e5\u770b <code>parseJson</code> \u548c <code>stringifyJson</code> \u9009\u9879\u3002</p> <p>\u8981\u4e86\u89e3\u66f4\u591a\u6709\u7528\u7684\u6280\u5de7\uff0c\u8bf7\u8bbf\u95eetips\u9875\u9762\u3002</p>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>\u7528\u4e8e 8K+\u5305\u548c 4M+\u56de\u8d2d</li> <li>\u79ef\u6781\u7ef4\u62a4</li> <li>\u6df1\u53d7\u4f17\u591a\u516c\u53f8\u4fe1\u8d56</li> </ul>"},{"location":"#_3","title":"\u6587\u6863","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cGot \u5c06\u5728\u5931\u8d25\u65f6\u91cd\u8bd5\u3002\u8981\u7981\u7528\u6b64\u9009\u9879\uff0c\u8bf7\u5c06 <code>options.retry.limit</code> \u8bbe\u7f6e\u4e3a 0\u3002</p>"},{"location":"#api","title":"\u4e3b\u8981 API","text":"<ul> <li> Promise API</li> <li> Options</li> <li> Stream API</li> <li> Pagination API</li> <li> Advanced HTTPS API</li> <li> HTTP/2 support</li> <li> <code>Response</code> class</li> </ul>"},{"location":"#_4","title":"\u8d85\u65f6\u5e76\u91cd\u8bd5","text":"<ul> <li> Advanced timeout handling</li> <li> Retries on failure</li> <li> Errors with metadata</li> </ul>"},{"location":"#_5","title":"\u5148\u8fdb\u7684\u521b\u9020","text":"<ul> <li> Hooks</li> <li> Instances</li> <li> Progress events &amp; other events</li> <li> Plugins</li> <li> Compose</li> </ul>"},{"location":"#unix-socket","title":"\u7f13\u5b58\uff0c\u4ee3\u7406\u548c UNIX socket","text":"<ul> <li> RFC compliant caching</li> <li> Proxy support</li> <li> Unix Domain Sockets</li> </ul>"},{"location":"#_6","title":"\u96c6\u6210","text":"<ul> <li> TypeScript support</li> <li> AWS</li> <li> Testing</li> </ul>"},{"location":"#_7","title":"\u8fc1\u79fb\u5411\u5bfc","text":"<ul> <li>Request migration guide</li> <li>(Note that Request is unmaintained)</li> <li>Axios</li> <li>Node.js</li> </ul>"},{"location":"#got_1","title":"Got \u63d2\u4ef6","text":"<ul> <li><code>got4aws</code> - Got convenience wrapper to interact with AWS v4 signed APIs</li> <li><code>gh-got</code> - Got convenience wrapper to interact with the GitHub API</li> <li><code>gl-got</code> - Got convenience wrapper to interact with the GitLab API</li> <li><code>gotql</code> - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings</li> <li><code>got-fetch</code> - Got with a <code>fetch</code> interface</li> <li><code>got-scraping</code> - Got wrapper specifically designed for web scraping purposes</li> <li><code>got-ssrf</code> - Got wrapper to protect server-side requests against SSRF attacks</li> </ul>"},{"location":"#_8","title":"\u9057\u4ea7","text":"<ul> <li>travis-got - Got \u65b9\u4fbf\u5305\u88c5\u4e0e\u7279\u62c9\u7ef4\u65af API \u4ea4\u4e92</li> <li>graphql-got - Got \u65b9\u4fbf\u7684\u5305\u88c5\u4e0e GraphQL \u4ea4\u4e92</li> </ul>"},{"location":"#_9","title":"\u6bd4\u8f83","text":"<code>got</code> <code>node-fetch</code> <code>ky</code> <code>axios</code> <code>superagent</code> HTTP/2 support \u00b9 ** Browser support * Promise API Stream API Node.js only Pagination API Request cancelation RFC compliant caching Cookies (out-of-box) Follows redirects Retries on failure Progress events *** Browser only Handles gzip/deflate Advanced timeouts Timings Errors with metadata JSON mode Custom defaults Composable Hooks Issues open Issues closed Downloads Coverage TBD Build Bugs Dependents Install size GitHub stars TypeScript support Last commit <p>* It's almost API compatible with the browser <code>fetch</code> API.\\ ** Need to switch the protocol manually. Doesn't accept PUSH streams and doesn't reuse HTTP/2 sessions.\\ *** Currently, only <code>DownloadProgress</code> event is supported, <code>UploadProgress</code> event is not supported.\\ \u00b9 Requires Node.js 15.10.0 or above.\\  Almost-stable feature, but the API may change. Don't hesitate to try it out!\\  Feature in early stage of development. Very experimental.</p> <p>Click here to see the install size of the Got dependencies.</p>"},{"location":"#_10","title":"\u7ef4\u62a4\u4eba\u5458","text":"Sindre Sorhus Szymon Marczak"},{"location":"#_11","title":"\u524d","text":"<ul> <li>Vsevolod Strukchinsky</li> <li>Alexander Tesfamichael</li> <li>Brandon Smith</li> <li>Luke Childs</li> <li>Giovanni Minotti</li> </ul>"},{"location":"#got_2","title":"\u8fd9\u4e9b\u4e86\u4e0d\u8d77\u7684\u516c\u53f8\u6b63\u5728\u4f7f\u7528 Got","text":"<p>\u6bb5\u662f\u4e00\u4e2a\u5feb\u4e50\u7684\u7528\u6237!Got \u4e3a\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8bdd\u7684\u4e3b\u540e\u7aef API \u63d0\u4f9b\u4e86\u52a8\u529b\u3002\u5b83\u88ab\u6211\u4eec\u7684\u5185\u90e8 RPC \u5ba2\u6237\u7aef\u4f7f\u7528\uff0c\u6211\u4eec\u7528\u5b83\u6765\u4e0e\u6240\u6709\u5fae\u670d\u52a1\u901a\u4fe1\u3002</p> <p>\u2014 Vadim Demedes</p> <p>Antora \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u6587\u6863\u7ad9\u70b9\u7684\u9759\u6001\u7ad9\u70b9\u751f\u6210\u5668\uff0c\u5b83\u4f7f\u7528 Got \u6765\u4e0b\u8f7d UI \u5305\u3002 \u5728 Antora \u4e2d\uff0cUI \u5305(\u53c8\u540d\u4e3b\u9898)\u662f\u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u9879\u76ee\u7ef4\u62a4\u7684\u3002 \u8be5\u9879\u76ee\u5c06 UI \u5bfc\u51fa\u4e3a zip \u6587\u4ef6\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a UI \u5305\u3002 \u4e3b\u7ad9\u70b9\u751f\u6210\u5668\u4f7f\u7528 Got \u4ece URL \u4e0b\u8f7d\u8be5 UI\uff0c\u5e76\u5c06\u5176\u4f20\u8f93\u5230 vinyl-zip \u4ee5\u63d0\u53d6\u6587\u4ef6\u3002 \u8fd9\u4e9b\u6587\u4ef6\u5c06\u7ee7\u7eed\u7528\u4e8e\u521b\u5efa HTML \u9875\u9762\u548c\u652f\u6301\u8d44\u4ea7\u3002</p> <p>\u2014 Dan Allen</p> <p>GetVoIP is happily using Got in production. One of the unique capabilities of Got is the ability to handle Unix sockets which enables us to build a full control interfaces for our docker stack.</p> <p>\u2014 Daniel Kalen</p> <p>We're using Got inside of Exoframe to handle all the communication between CLI and server. Exoframe is a self-hosted tool that allows simple one-command deployments using Docker.</p> <p>\u2014 Tim Ermilov</p> <p>Karaoke Mugen uses Got to fetch content updates from its online server.</p> <p>\u2014 Axel Terizaki</p> <p>Renovate uses Got, gh-got and gl-got to send millions of queries per day to GitHub, GitLab, npmjs, PyPi, Packagist, Docker Hub, Terraform, CircleCI, and more.</p> <p>\u2014 Rhys Arkins</p> <p>Resistbot uses Got to communicate from the API frontend where all correspondence ingresses to the officials lookup database in back.</p> <p>\u2014 Chris Erickson</p> <p>Natural Cycles is using Got to communicate with all kinds of 3rd-party REST APIs (over 9000!).</p> <p>\u2014 Kirill Groshkov</p> <p>Microlink is a cloud browser as an API service that uses Got widely as the main HTTP client, serving ~22M requests a month, every time a network call needs to be performed.</p> <p>\u2014 Kiko Beats</p> <p>We\u2019re using Got at Radity. Thanks for such an amazing work!</p> <p>\u2014 Mirzayev Farid</p> <p>Got has been a crucial component of Apify's scraping for years. We use it to extract data from billions of web pages every month, and we really appreciate the powerful API and extensibility, which allowed us to build our own specialized HTTP client on top of Got. The support has always been stellar too.</p> <p>\u2014 Ondra Urban</p>"},{"location":"#_12","title":"\u4e3a\u4f01\u4e1a","text":"<p>Available as part of the Tidelift Subscription.</p> <p>The maintainers of <code>got</code> and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.</p>"},{"location":"1-promise/","title":"\u540c\u6b65 API","text":"<p>\u6e90\u7801: <code>source/as-promise/index.ts</code></p> <p>\u4e3bGot\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a<code>Promise</code>\u3002 \u867d\u7136\u4e3a\u4e86\u652f\u6301\u53d6\u6d88\uff0c\u4f7f\u7528<code>PCancelable</code>\u4ee3\u66ff\u7eaf<code>Promise</code>\u3002</p>"},{"location":"1-promise/#goturl-string-url-options-optionsinit-defaults-options","title":"<code>got(url: string | URL, options?: OptionsInit, defaults?: Options)</code>","text":"<p>\u8fd4\u56de: <code>Promise&lt;Response&gt;</code> <p>\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u5c06URL\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u7136\u540e\u5c06\u9009\u9879\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u3002</p> <pre><code>import got from \"got\";\nconst { headers } = await got(\"https://httpbin.org/anything\", {\nheaders: {\nfoo: \"bar\",\n},\n}).json();\n</code></pre>"},{"location":"1-promise/#gotoptions-optionsinit","title":"<code>got(options: OptionsInit)</code>","text":"<p>Returns: <code>Promise&lt;Response&gt;</code> <p>\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u53ea\u4f20\u9012\u5305\u542b<code>url</code>\u5c5e\u6027\u7684\u9009\u9879\u3002</p> <pre><code>import got from \"got\";\nconst { headers } = await got({\nurl: \"https://httpbin.org/anything\",\nheaders: {\nfoo: \"bar\",\n},\n}).json();\n</code></pre> <p>\u8fd9\u5728\u8bed\u4e49\u4e0a\u4e0e\u7b2c\u4e00\u79cd\u65b9\u6cd5\u76f8\u540c\u3002</p>"},{"location":"1-promise/#promisejsont","title":"<code>promise.json&lt;T&gt;()</code>","text":"<p>Returns: <code>Promise&lt;T&gt;</code></p> <p>\u4e00\u4e2a\u5feb\u6377\u65b9\u6cd5\uff0c\u5b83\u7ed9\u51fa\u4e00\u4e2a\u8fd4\u56deJSON\u5bf9\u8c61\u7684Promise\u3002</p> <p>\u5b83\u5728\u8bed\u4e49\u4e0a\u4e0e\u5c06<code>options.resolveBodyOnly</code>\u8bbe\u7f6e\u4e3a<code>true</code>\u548c\u5c06<code>options.responseType</code>\u8bbe\u7f6e\u4e3a<code>'json'</code>\u76f8\u540c\u3002</p>"},{"location":"1-promise/#promisebuffer","title":"<code>promise.buffer()</code>","text":"<p>Returns: <code>Promise&lt;Buffer&gt;</code></p> <p>\u7ed9\u51fa\u4e00\u4e2aPromise\u8fd4\u56de\u4e00\u4e2aBuffer\u7684\u5feb\u6377\u65b9\u6cd5.</p> <p>\u5b83\u5728\u8bed\u4e49\u4e0a\u4e0e\u5c06 <code>options.resolveBodyOnly</code>\u8bbe\u7f6e\u4e3a<code>true</code>\u548c\u5c06<code>options.responseType</code>\u8bbe\u7f6e\u4e3a<code>'buffer'</code>\u76f8\u540c\u3002</p>"},{"location":"1-promise/#promisetext","title":"<code>promise.text()</code>","text":"<p>Returns: <code>Promise&lt;string&gt;</code></p> <p>\u4e00\u4e2a\u5feb\u6377\u65b9\u6cd5\uff0c\u7ed9\u51fa\u4e00\u4e2a\u8fd4\u56de\u5b57\u7b26\u4e32\u7684Promise\u3002</p> <p>\u5b83\u5728\u8bed\u4e49\u4e0a\u4e0e\u5c06 <code>options.resolveBodyOnly</code> \u8bbe\u7f6e\u4e3a <code>true</code> \u548c\u5c06 <code>options.responseType</code> \u8bbe\u7f6e\u4e3a <code>'text'</code>\u76f8\u540c\u3002.</p>"},{"location":"1-promise/#promisecancelreason-string","title":"<code>promise.cancel(reason?: string)</code>","text":"<p>\u53d6\u6d88\u8bf7\u6c42\uff0c\u5e76\u53ef\u9009\u62e9\u63d0\u4f9b\u539f\u56e0\u3002</p> <p>\u53d6\u6d88\u662f\u540c\u6b65\u7684\u3002 \u5728\u627f\u8bfa\u5df2\u7ecf\u5b8c\u6210\u6216\u591a\u6b21\u4e4b\u540e\u8c03\u7528\u5b83\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u3002</p> <p>\u8fd9\u5c06\u5bfc\u81f4promise\u4ee5<code>CancelError</code>\u62d2\u7edd\u3002</p>"},{"location":"1-promise/#promiseiscanceled","title":"<code>promise.isCanceled</code>","text":"<p>\u7c7b\u578b: <code>boolean</code></p> <p>\u627f\u8bfa\u662f\u5426\u88ab\u53d6\u6d88\u3002</p>"},{"location":"1-promise/#promiseonevent-handler","title":"<code>promise.on(event, handler)</code>","text":"<p>\u4e8b\u4ef6\u4e0e\u6d41API\u4e2d\u76f8\u540c.</p>"},{"location":"1-promise/#promiseoffevent-handler","title":"<code>promise.off(event, handler)</code>","text":"<p>\u79fb\u9664\u7528<code>promise.on</code>\u6ce8\u518c\u7684\u76d1\u542c\u5668</p> <pre><code>import { createReadStream } from \"node:fs\";\nimport got from \"got\";\nconst ongoingRequestPromise = got.post(uploadUrl, {\nbody: createReadStream(\"sample.txt\"),\n});\nconst eventListener = (progress: Progress) =&gt; {\nconsole.log(progress);\n};\nongoingRequestPromise.on(\"uploadProgress\", eventListener);\nsetTimeout(() =&gt; {\nongoingRequestPromise.off(\"uploadProgress\", eventListener);\n}, 500);\nawait ongoingRequestPromise;\n</code></pre>"},{"location":"10-instances/","title":"\u5b9e\u4f8b","text":"<p>\u6e90\u7801: <code>source/create.ts</code></p>"},{"location":"10-instances/#gotdefaults","title":"<code>got.defaults</code>","text":""},{"location":"10-instances/#options","title":"<code>options</code>","text":"<p>\u7c7b\u578b: <code>Options</code></p> <p>The options used for this instance.</p>"},{"location":"10-instances/#handlers","title":"<code>handlers</code>","text":"<p>\u7c7b\u578b: <code>Handler[]</code></p> <pre><code>(options: Options, next: \u2026) =&gt; next(options)\n</code></pre> <p>An array of handlers. The <code>next</code> function returns a <code>Promise</code> or a <code>Request</code> Got stream.</p> <p>You execute them directly by calling <code>got(\u2026)</code>. They are some sort of \"global hooks\" - these functions are called first. The last handler (it's invisible) is either <code>asPromise</code> or <code>asStream</code>, depending on the <code>options.isStream</code> property.</p>"},{"location":"10-instances/#mutabledefaults","title":"<code>mutableDefaults</code>","text":"<p>\u7c7b\u578b: <code>boolean</code> \u9ed8\u8ba4: <code>false</code></p> <p>Determines whether <code>got.defaults.options</code> can be modified.</p>"},{"location":"10-instances/#gotextendoptions-instances","title":"<code>got.extend(\u2026options, \u2026instances)</code>","text":"<p>Tip:</p> <ul> <li><code>options</code> can include <code>handlers</code> and <code>mutableDefaults</code>.</li> </ul> <p>Note:</p> <ul> <li>Properties that are not enumerable, such as <code>body</code>, <code>json</code>, and <code>form</code>, will not be merged.</li> </ul> <p>Configure a new <code>got</code> instance with merged default options. The options are merged with the parent instance's <code>defaults.options</code> using <code>options.merge(\u2026)</code>.</p> <pre><code>import got from \"got\";\nconst client = got.extend({\nprefixUrl: \"https://httpbin.org\",\nheaders: {\n\"x-foo\": \"bar\",\n},\n});\nconst { headers } = await client.get(\"headers\").json();\nconsole.log(headers[\"x-foo\"]); //=&gt; 'bar'\nconst jsonClient = client.extend({\nresponseType: \"json\",\nresolveBodyOnly: true,\nheaders: {\n\"x-lorem\": \"impsum\",\n},\n});\nconst { headers: headers2 } = await jsonClient.get(\"headers\");\nconsole.log(headers2[\"x-foo\"]); //=&gt; 'bar'\nconsole.log(headers2[\"x-lorem\"]); //=&gt; 'impsum'\n</code></pre> <p>Note:</p> <ul> <li>Handlers can be asynchronous and can return a <code>Promise</code>, but never a <code>Promise&lt;Stream&gt;</code> if <code>options.isStream</code> is <code>true</code>.</li> <li>Streams must always be handled synchronously.</li> <li>In order to perform async work using streams, the <code>beforeRequest</code> hook should be used instead.</li> </ul> <p>The recommended approach for creating handlers that can handle both promises and streams is:</p> <pre><code>import got from \"got\";\n// Create a non-async handler, but we can return a Promise later.\nconst handler = (options, next) =&gt; {\nif (options.isStream) {\n// It's a Stream, return synchronously.\nreturn next(options);\n}\n// For asynchronous work, return a Promise.\nreturn (async () =&gt; {\ntry {\nconst response = await next(options);\nresponse.yourOwnProperty = true;\nreturn response;\n} catch (error) {\n// Every error will be replaced by this one.\n// Before you receive any error here,\n// it will be passed to the `beforeError` hooks first.\n// Note: this one won't be passed to `beforeError` hook. It's final.\nthrow new Error(\"Your very own error.\");\n}\n})();\n};\nconst instance = got.extend({ handlers: [handler] });\n</code></pre>"},{"location":"2-options/","title":"\u9009\u9879","text":"<p>\u6e90\u7801: <code>source/core/options.ts</code></p> <p>\u5c31\u50cf <code>fetch</code> \u5728 <code>Request</code> \u5b9e\u4f8b\u4e2d\u5b58\u50a8\u9009\u9879\u4e00\u6837\uff0cGot \u5728 <code>options</code> \u5b9e\u4f8b\u4e2d\u5b58\u50a8\u9009\u9879\u3002 \u5b83\u7531 <code>getter</code> \u548c <code>setter</code> \u7ec4\u6210\uff0c\u63d0\u4f9b\u5feb\u901f\u7684\u9009\u9879\u89c4\u8303\u5316\u548c\u9a8c\u8bc1\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cGot \u5c06\u5728\u5931\u8d25\u65f6\u91cd\u8bd5\u3002\u82e5\u8981\u7981\u7528\u6b64\u9009\u9879\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c, \u8bbe\u7f6e <code>options.retry</code> \u4e3a <code>{limit: 0}</code>.</p>"},{"location":"2-options/#_2","title":"\u5408\u5e76\u884c\u4e3a\u89e3\u91ca","text":"<p>\u5f53\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u9009\u9879\u65f6\uff0c\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u518d\u6b21\u8bbe\u7f6e\u5b83\u5c06\u7528\u6df1\u5ea6\u514b\u9686\u66ff\u6362\u5b83\u3002 \u5426\u5219\uff0c\u5408\u5e76\u884c\u4e3a\u5c06\u5728\u9009\u9879\u7684\u76f8\u5e94\u90e8\u5206\u4e2d\u8fdb\u884c\u8bb0\u5f55\u3002</p>"},{"location":"2-options/#_3","title":"\u5982\u4f55\u5b58\u50a8\u9009\u9879","text":"<p>\u6784\u9020\u51fd\u6570 - <code>new Options(url, options, defaults)</code> - \u63a5\u53d7\u4e0e' got '\u51fd\u6570\u76f8\u540c\u7684\u53c2\u6570\u3002</p> <pre><code>import got, { Options } from \"got\";\nconst options = new Options({\nprefixUrl: \"https://httpbin.org\",\nheaders: {\nfoo: \"foo\",\n},\n});\noptions.headers.foo = \"bar\";\n// Note that `Options` stores normalized options, therefore it needs to be passed as the third argument.\nconst { headers } = await got(\"anything\", undefined, options).json();\nconsole.log(headers.Foo);\n//=&gt; 'bar'\n</code></pre> <p>\u5982\u679c\u9996\u9009\u4e00\u4e2a\u666e\u901a\u5bf9\u8c61\uff0c\u5b83\u53ef\u4ee5\u4ee5\u4ee5\u4e0b\u65b9\u5f0f\u4f7f\u7528:</p> <pre><code>import got from \"got\";\nconst options = {\nprefixUrl: \"https://httpbin.org\",\nheaders: {\nfoo: \"bar\",\n},\n};\noptions.headers.foo = \"bar\";\n// Note that `options` is a plain object, therefore it needs to be passed as the second argument.\nconst { headers } = await got(\"anything\", options).json();\nconsole.log(headers.Foo);\n//=&gt; 'bar'\n</code></pre> <p>\u6ce8\u610f\uff0c\u5f53\u63d0\u4f9b\u4e86\u65e0\u6548\u7684\u9009\u9879\u65f6\uff0c\u6784\u9020\u51fd\u6570\u4f1a\u629b\u51fa\uff0c\u6bd4\u5982\u4e0d\u5b58\u5728\u7684\u9009\u9879\u6216\u8f93\u5165\u9519\u8bef\u3002 \u5728\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b83\u53ea\u5728\u6267\u884c\u627f\u8bfa\u65f6\u629b\u51fa\u3002</p> <p>\u5bf9\u4e8e TypeScript \u7528\u6237\uff0c' got '\u5bfc\u51fa\u4e00\u4e2a\u540d\u4e3a' OptionsInit '\u7684\u4e13\u7528\u7c7b\u578b\u3002 \u5b83\u662f\u4e00\u4e2a\u666e\u901a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u5b58\u50a8\u4e0e\u201cOptions\u201d\u76f8\u540c\u7684\u5c5e\u6027\u3002</p> <p>\u5728\u6027\u80fd\u65b9\u9762\uff0c\u4f7f\u7528\u54ea\u4e00\u4e2a\u6ca1\u6709\u533a\u522b\uff0c\u5c3d\u7ba1\u6784\u9020\u51fd\u6570\u53ef\u80fd\u662f\u9996\u9009\u7684\uff0c\u56e0\u4e3a\u5b83\u4f1a\u81ea\u52a8\u9a8c\u8bc1\u6570\u636e\u3002 <code>Options</code>\u65b9\u6cd5\u53ef\u80fd\u4f1a\u6709\u8f7b\u5fae\u7684\u63d0\u5347\uff0c\u56e0\u4e3a\u5b83\u53ea\u662f\u514b\u9686\u9009\u9879\uff0c\u6ca1\u6709\u6807\u51c6\u5316\u3002 \u5b83\u5bf9\u4e8e\u5b58\u50a8\u81ea\u5b9a\u4e49 Got \u5ba2\u6237\u7aef\u7684\u57fa\u672c\u914d\u7f6e\u4e5f\u5f88\u6709\u7528\u3002</p>"},{"location":"2-options/#_4","title":"\u91cd\u7f6e\u9009\u9879","text":"<p>\u4e0e Got 11 \u4e0d\u540c\uff0c\u663e\u5f0f\u6307\u5b9a' undefined '\u4e0d\u518d\u4fdd\u7559\u7236\u503c\u3002 \u4e3a\u4e86\u4fdd\u6301\u7236\u503c\uff0c\u4f60\u4e0d\u80fd\u5c06\u4e00\u4e2a\u9009\u9879\u8bbe\u7f6e\u4e3a' undefined '\u3002 \u8fd9\u6837\u505a\u5c06\u91cd\u7f6e\u8fd9\u4e9b\u503c:</p> <pre><code>instance(\u2026, {searchParams: undefined}});\ninstance(\u2026, {cookieJar: undefined}});\ninstance(\u2026, {responseType: undefined}});\ninstance(\u2026, {prefixUrl: ''});\ninstance(\u2026, {agent: {http: undefined, https: undefined, http2: undefined}});\ninstance(\u2026, {context: {token: undefined, \u2026}});\ninstance(\u2026, {https: {rejectUnauthorized: undefined, \u2026}});\ninstance(\u2026, {cacheOptions: {immutableMinTimeToLive: undefined, \u2026}});\ninstance(\u2026, {headers: {'user-agent': undefined, \u2026}});\ninstance(\u2026, {timeout: {request: undefined, \u2026}});\n</code></pre> <p>\u4e3a\u4e86\u91cd\u7f6e' hooks '\uff0c ' retry '\u548c' pagination '\uff0c\u5fc5\u987b\u521b\u5efa\u53e6\u4e00\u4e2a Got \u5b9e\u4f8b:</p> <pre><code>const defaults = new Options();\nconst secondInstance = instance.extend({ mutableDefaults: true });\nsecondInstance.defaults.options.hooks = defaults.hooks;\nsecondInstance.defaults.options.retry = defaults.retry;\nsecondInstance.defaults.options.pagination = defaults.pagination;\n</code></pre>"},{"location":"2-options/#_5","title":"\u5c5e\u6027","text":""},{"location":"2-options/#url","title":"<code>url</code>","text":"<p>\u7c7b\u578b: <code>string | URL</code></p> <p>\u8981\u8bf7\u6c42\u7684 URL\u3002\u901a\u5e38' url '\u8868\u793a\u4e00\u4e2aWHATWG url.</p> <pre><code>import got from \"got\";\n// This:\nawait got(\"https://httpbin.org/anything\");\n// is semantically the same as this:\nawait got(new URL(\"https://httpbin.org/anything\"));\n// as well as this:\nawait got({\nurl: \"https://httpbin.org/anything\",\n});\n</code></pre> <p>Note</p> <p>\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u534f\u8bae\u5219\u629b\u51fa\u3002</p> <p>Note</p> <p>\u5982\u679c' url '\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48' query '\u5b57\u7b26\u4e32\u5c06\u4e0d\u4f1a\u88ab\u89e3\u6790\u4e3a\u641c\u7d22\u53c2\u6570\u3002 \u8fd9\u7b26\u5408\u89c4\u8303\u3002 \u5982\u679c\u4f60\u60f3\u4f20\u9012\u641c\u7d22\u53c2\u6570\uff0c\u4f7f\u7528\u4e0b\u9762\u7684' searchParams '\u9009\u9879\u3002</p> <pre><code>import got from \"got\";\nawait got(\"https://httpbin.org/anything?query=a b\"); //=&gt; ?query=a%20b\nawait got(\"https://httpbin.org/anything\", { searchParams: { query: \"a b\" } }); //=&gt; ?query=a+b\n// The query string is overridden by `searchParams`\nawait got(\"https://httpbin.org/anything?query=a b\", {\nsearchParams: { query: \"a b\" },\n}); //=&gt; ?query=a+b\n</code></pre> <p>Note</p> <p>\u4e0d\u5141\u8bb8\u4f7f\u7528\u524d\u5bfc\u659c\u6760\uff0c\u4ee5\u52a0\u5f3a\u4e00\u81f4\u6027\u5e76\u907f\u514d\u6df7\u6dc6\u3002 \u4f8b\u5982\uff0c\u5f53\u524d\u7f00URL\u662f' https://example.com/foo '\uff0c\u8f93\u5165\u662f' /bar '\u65f6\uff0c \u7ed3\u679cURL\u4f1a\u53d8\u6210' https://example.com/foo/bar '\u8fd8\u662f' https://example.com/bar '\u662f\u4e0d\u660e\u786e\u7684\u3002 \u540e\u8005\u7531\u6d4f\u89c8\u5668\u4f7f\u7528\u3002</p>"},{"location":"2-options/#searchparams","title":"<code>searchParams</code>","text":"<p>\u7c7b\u578b: <code>string | URLSearchParams | object&lt;string, Primitive&gt;</code></p> <p>WHATWG URL \u641c\u7d22\u53c2\u6570\u8981\u6dfb\u52a0\u5230\u8bf7\u6c42 URL \u4e2d\u3002</p> <pre><code>import got from \"got\";\nconst response = await got(\"https://httpbin.org/anything\", {\nsearchParams: {\nhello: \"world\",\nfoo: 123,\n},\n}).json();\nconsole.log(response.args);\n//=&gt; {hello: 'world', foo: 123}\n</code></pre> <p>\u5982\u679c\u4f60\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u6570\u7ec4\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528' URLSearchParams '\u5b9e\u4f8b:</p> <pre><code>import got from \"got\";\nconst searchParams = new URLSearchParams([\n[\"key\", \"a\"],\n[\"key\", \"b\"],\n]);\nawait got(\"https://httpbin.org/anything\", { searchParams });\nconsole.log(searchParams.toString());\n//=&gt; 'key=a&amp;key=b'\n</code></pre> <p>Note</p> <p>\u8fd9\u5c06\u8986\u76d6' url '\u4e2d\u7684' query '\u5b57\u7b26\u4e32\u3002</p> <p>Note</p> <ul> <li>' null '\u503c\u4e0d\u8fdb\u884c\u5b57\u7b26\u4e32\u5316\uff0c\u800c\u662f\u4f7f\u7528\u7a7a\u5b57\u7b26\u4e32\u3002</li> <li>' undefined '\u503c\u5c06\u6e05\u9664\u539f\u59cb\u952e\u3002</li> </ul> <p>\u5408\u5e76\u884c\u4e3a</p> <ul> <li>\u8986\u76d6\u73b0\u6709\u5c5e\u6027\u3002</li> </ul>"},{"location":"2-options/#prefixurl","title":"<code>prefixUrl</code>","text":"<p>\u7c7b\u578b: <code>string</code> \u9ed8\u8ba4: <code>''</code></p> <p>\u8981\u52a0\u5728 <code>url</code> \u524d\u9762\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u524d\u7f00\u53ef\u4ee5\u662f\u4efb\u4f55\u6709\u6548\u7684 URL\uff0c\u65e0\u8bba\u662f\u76f8\u5bf9 URL \u8fd8\u662f\u7edd\u5bf9 URL\u3002 \u540e\u9762\u7684\u659c\u6760 <code>/</code> \u662f\u53ef\u9009\u7684\uff0c\u4f1a\u81ea\u52a8\u6dfb\u52a0\u3002</p> <pre><code>import got from \"got\";\n// This:\nconst instance = got.extend({ prefixUrl: \"https://httpbin.org\" });\nawait instance(\"anything\");\n// is semantically the same as this:\nawait got(\"https://httpbin.org/anything\");\n</code></pre> <p>Note</p> <p>\u66f4\u6539' prefixUrl '\u4e5f\u66f4\u65b0' url '\u9009\u9879\u5982\u679c\u8bbe\u7f6e\u3002</p> <p>Note</p> <p>\u5982\u679c\u4f60\u4f20\u9012\u4e00\u4e2a\u7edd\u5bf9URL\u4f5c\u4e3a' URL '\uff0c\u4f60\u9700\u8981\u8bbe\u7f6e' prefixUrl '\u4e3a\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u3002</p>"},{"location":"2-options/#signal","title":"<code>signal</code>","text":"<p>\u7c7b\u578b: <code>AbortSignal</code></p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528<code>AbortController</code>\u6765\u4e2d\u6b62\u8bf7\u6c42.</p> <p>\u9700\u8981Node.js 16\u6216\u66f4\u9ad8\u7248\u672c.</p> <pre><code>import got from \"got\";\nconst abortController = new AbortController();\nconst request = got(\"https://httpbin.org/anything\", {\nsignal: abortController.signal,\n});\nsetTimeout(() =&gt; {\nabortController.abort();\n}, 100);\n</code></pre>"},{"location":"2-options/#method","title":"<code>method</code>","text":"<p>\u7c7b\u578b: <code>string</code> \u9ed8\u8ba4: <code>GET</code></p> <p>\u7528\u4e8e\u53d1\u51fa\u8bf7\u6c42\u7684HTTP\u65b9\u6cd5\u3002  \u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u662f: <code>GET</code>, <code>HEAD</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>.</p> <pre><code>import got from \"got\";\nconst { method } = await got(\"https://httpbin.org/anything\", {\nmethod: \"POST\",\n}).json();\nconsole.log(method);\n// =&gt; 'POST'\n</code></pre>"},{"location":"2-options/#headers","title":"<code>headers</code>","text":"<p>\u7c7b\u578b: <code>object&lt;string, string&gt;</code> \u9ed8\u8ba4: <code>{}</code></p> <p>\u8981\u53d1\u9001\u7684HTTP\u5934\u3002\u8bbe\u7f6e\u4e3a<code>undefined</code>\u7684\u6807\u5934\u5c06\u88ab\u7701\u7565\u3002</p> <pre><code>import got from \"got\";\nconst { headers } = await got\n.post(\"https://httpbin.org/anything\", {\nheaders: {\nhello: \"world\",\n},\n})\n.json();\nconsole.log(headers);\n// =&gt; {hello: 'world'}\n</code></pre> <p>\u5408\u5e76\u884c\u4e3a</p> <p>\u8986\u76d6\u73b0\u6709\u5c5e\u6027\u3002</p>"},{"location":"2-options/#isstream","title":"<code>isStream</code>","text":"<p>\u7c7b\u578b: <code>boolean</code> \u9ed8\u8ba4: <code>false</code></p> <p><code>got</code>\u51fd\u6570\u662f\u5426\u5e94\u8be5\u8fd4\u56de<code>Request</code>\u53cc\u5de5\u6d41\u6216<code>Promise&lt;Response&gt;</code>\u3002</p> <pre><code>import got from \"got\";\n// This:\nconst stream = got(\"https://httpbin.org/anything\", { isStream: true });\n// is semantically the same as this:\nconst stream = got.stream(\"https://httpbin.org/anything\");\nstream.setEncoding(\"utf8\");\nstream.on(\"data\", console.log);\n</code></pre>"},{"location":"2-options/#body","title":"<code>body</code>","text":"<p>\u7c7b\u578b: <code>string | Buffer | stream.Readable | Generator | AsyncGenerator | FormData</code> or <code>form-data</code> instance</p> <p>\u8981\u53d1\u9001\u7684\u6709\u6548\u8f7d\u8377\u3002</p> <p>\u5bf9\u4e8e <code>string</code> \u548c <code>Buffer</code> \u7c7b\u578b\uff0c\u5982\u679c <code>content-length</code> \u548c <code>transfer-encoding</code> \u5934\u7f3a\u5931\uff0c <code>content-length</code> \u5934\u5c06\u81ea\u52a8\u8bbe\u7f6e\u3002</p> <p>\u4ece Got 12 \u5f00\u59cb\uff0c\u5f53 <code>body</code> \u662f <code>fs.createReadStream()</code> \u7684\u5b9e\u4f8b\u65f6\uff0c <code>content-length</code> \u5934\u4e0d\u4f1a\u81ea\u52a8\u8bbe\u7f6e\u3002.</p> <pre><code>import got from \"got\";\nconst { data } = await got\n.post(\"https://httpbin.org/anything\", {\nbody: \"Hello, world!\",\n})\n.json();\nconsole.log(data);\n//=&gt; 'Hello, world!'\n</code></pre> <p>\u4ece Got 12 \u5f00\u59cb\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u7b26\u5408\u89c4\u8303\u7684 <code>FormData</code> \u5bf9\u8c61\u4f5c\u4e3a\u8bf7\u6c42\u4f53\uff0c\u4f8b\u5982<code>formdata-node</code>\u6216<code>formdata-polyfill</code>:</p> <pre><code>import got from \"got\";\nimport { FormData } from \"formdata-node\"; // or:\n// import {FormData} from 'formdata-polyfill/esm.min.js';\nconst form = new FormData();\nform.set(\"greeting\", \"Hello, world!\");\nconst data = await got\n.post(\"https://httpbin.org/post\", {\nbody: form,\n})\n.json();\nconsole.log(data.form.greeting);\n//=&gt; 'Hello, world!'\n</code></pre> <p>Note</p> <p>\u5982\u679c\u6307\u5b9a\u4e86 <code>body</code> \uff0c\u5219\u4e0d\u80fd\u4f7f\u7528 <code>json</code> \u6216 <code>form</code> \u9009\u9879\u3002</p> <p>Note</p> <p>\u5982\u679c\u4f7f\u7528\u6b64\u9009\u9879\uff0c <code>got.stream()</code> \u5c06\u662f\u53ea\u8bfb\u7684\u3002</p> <p>Note</p> <p>\u9664\u975e <code>allowGetBody</code> \u9009\u9879\u8bbe\u7f6e\u4e3a <code>true</code> \uff0c\u5426\u5219\u7528 <code>GET</code> \u4f20\u9012 <code>body</code> \u5c06\u629b\u51fa\u3002</p> <p>Note</p> <p>\u6b64\u9009\u9879\u4e0d\u53ef\u679a\u4e3e\uff0c\u5e76\u4e14\u4e0d\u4f1a\u4e0e\u5b9e\u4f8b\u9ed8\u8ba4\u503c\u5408\u5e76\u3002</p>"},{"location":"2-options/#json","title":"<code>json</code>","text":"<p>\u7c7b\u578b: JSON-serializable values</p> <p>JSON body. \u5982\u679c\u8bbe\u7f6e\uff0c <code>content-type</code> \u5934\u9ed8\u8ba4\u4e3a <code>application/json</code> \u3002</p> <pre><code>import got from \"got\";\nconst { data } = await got\n.post(\"https://httpbin.org/anything\", {\njson: {\nhello: \"world\",\n},\n})\n.json();\nconsole.log(data);\n//=&gt; `{hello: 'world'}`\n</code></pre>"},{"location":"2-options/#form","title":"<code>form</code>","text":"<p>\u7c7b\u578b: <code>object&lt;string, Primitive&gt;</code></p> <p>\u4f7f\u7528 <code>(new URLSearchParams(form)).toString()</code> \u5c06\u8868\u5355\u4e3b\u4f53\u8f6c\u6362\u4e3a\u67e5\u8be2\u5b57\u7b26\u4e32.</p> <p>\u5982\u679c\u8bbe\u7f6e\u4e86\uff0c <code>content-type</code> \u5934\u9ed8\u8ba4\u4e3a <code>application/x-www-form-urlencoded</code> .</p> <pre><code>import got from \"got\";\nconst { data } = await got\n.post(\"https://httpbin.org/anything\", {\nform: {\nhello: \"world\",\n},\n})\n.json();\nconsole.log(data);\n//=&gt; 'hello=world'\n</code></pre>"},{"location":"2-options/#parsejson","title":"<code>parseJson</code>","text":"<p>\u7c7b\u578b: <code>(text: string) =&gt; unknown</code> \u9ed8\u8ba4: <code>(text: string) =&gt; JSON.parse(text)</code></p> <p>\u7528\u4e8e\u89e3\u6790 JSON \u54cd\u5e94\u7684\u51fd\u6570\u3002</p> <pre><code>import got from \"got\";\nimport Bourne from \"@hapi/bourne\";\n// Preventing prototype pollution by using Bourne\nconst parsed = await got(\"https://example.com\", {\nparseJson: (text) =&gt; Bourne.parse(text),\n}).json();\nconsole.log(parsed);\n</code></pre>"},{"location":"2-options/#stringifyjson","title":"<code>stringifyJson</code>","text":"<p>\u7c7b\u578b: <code>(object: unknown) =&gt; string</code> \u9ed8\u8ba4: <code>(object: unknown) =&gt; JSON.stringify(object)</code></p> <p>\u7528\u4e8e\u5bf9 JSON \u8bf7\u6c42\u4f53\u8fdb\u884c\u5b57\u7b26\u4e32\u5316\u7684\u51fd\u6570\u3002</p> <p>\u4f8b\u5982:\u5ffd\u7565\u6240\u6709\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5c5e\u6027</p> <pre><code>import got from \"got\";\nawait got.post(\"https://example.com\", {\nstringifyJson: (object) =&gt;\nJSON.stringify(object, (key, value) =&gt; {\nif (key.startsWith(\"_\")) {\nreturn;\n}\nreturn value;\n}),\njson: {\nsome: \"payload\",\n_ignoreMe: 1234,\n},\n});\n</code></pre> <p>\u4f8b\u5982:\u6240\u6709\u6570\u5b57\u90fd\u662f\u5b57\u7b26\u4e32</p> <pre><code>import got from \"got\";\nawait got.post(\"https://example.com\", {\nstringifyJson: (object) =&gt;\nJSON.stringify(object, (key, value) =&gt; {\nif (typeof value === \"number\") {\nreturn value.toString();\n}\nreturn value;\n}),\njson: {\nsome: \"payload\",\nnumber: 1,\n},\n});\n</code></pre>"},{"location":"2-options/#allowgetbody","title":"<code>allowGetBody</code>","text":"<p>\u7c7b\u578b: <code>boolean</code> \u9ed8\u8ba4: <code>false</code></p> <p>\u5c06\u6b64\u8bbe\u7f6e\u4e3a <code>true</code> \u4ee5\u5141\u8bb8\u4e3a <code>GET</code> \u65b9\u6cd5\u53d1\u9001\u6b63\u6587\u3002</p> <p>\u7136\u800c\uff0cHTTP/2 \u89c4\u8303\u8bf4:</p> <p>HTTP GET \u8bf7\u6c42\u5305\u62ec\u8bf7\u6c42\u5934\u5b57\u6bb5\uff0c\u6ca1\u6709\u6709\u6548\u8d1f\u8f7d\u4e3b\u4f53</p> <p>\u56e0\u6b64\uff0c\u8be5\u9009\u9879\u5728\u4f7f\u7528 HTTP/2 \u65f6\u65e0\u6548\u3002</p> <p>Note</p> <p>\u6b64\u9009\u9879\u4ec5\u7528\u4e8e\u5728\u6ca1\u6709\u5176\u4ed6\u9009\u62e9\u65f6\u4e0e\u4e0d\u517c\u5bb9\u7684\u670d\u52a1\u5668\u4ea4\u4e92\u3002</p> <p>Note</p> <p>RFC 7231\u6ca1\u6709\u4e3a\u5177\u6709\u6709\u6548\u8d1f\u8f7d\u7684GET\u65b9\u6cd5\u6307\u5b9a\u4efb\u4f55\u7279\u5b9a\u884c\u4e3a\uff0c\u56e0\u6b64\u5b83\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u53cd\u6a21\u5f0f\u3002</p>"},{"location":"2-options/#timeout","title":"<code>timeout</code>","text":"<p>\u7c7b\u578b: <code>object</code></p> <p>See the Timeout API.</p> <p>\u5408\u5e76\u884c\u4e3a</p> <p>\u8986\u76d6\u73b0\u6709\u5c5e\u6027\u3002</p>"},{"location":"2-options/#retry","title":"<code>retry</code>","text":"<p>\u7c7b\u578b: <code>object</code></p> <p>See the Retry API.</p> <p>\u5408\u5e76\u884c\u4e3a</p> <p>\u8986\u76d6\u73b0\u6709\u5c5e\u6027\u3002</p>"},{"location":"2-options/#hooks","title":"<code>hooks</code>","text":"<p>\u7c7b\u578b: <code>object</code></p> <p>See the Hooks API.</p> <p>\u5408\u5e76\u884c\u4e3a</p> <p>Merges arrays via <code>[...hooksArray, ...next]</code></p>"},{"location":"2-options/#encoding","title":"<code>encoding</code>","text":"<p>\u7c7b\u578b: <code>string</code> \u9ed8\u8ba4: <code>'utf8'</code></p> <p>Encoding to be used on <code>setEncoding</code> of the response data.</p> <p>To get a <code>Buffer</code>, you need to set <code>responseType</code> to <code>'buffer'</code> instead. Don't set this option to <code>null</code>.</p> <pre><code>import got from \"got\";\nconst response = await got(\"https://httpbin.org/anything\", {\nencoding: \"base64\",\n}).text();\nconsole.log(response);\n//=&gt; base64 string\n</code></pre> <p>Note</p> <p>This option does not affect streams! Instead, do:</p> <pre><code>import got from \"got\";\nconst stream = got.stream(\"https://httpbin.org/anything\");\nstream.setEncoding(\"base64\");\nstream.on(\"data\", console.log);\n</code></pre>"},{"location":"2-options/#responsetype","title":"<code>responseType</code>","text":"<p>\u7c7b\u578b: <code>'text' | 'json' | 'buffer'</code> \u9ed8\u8ba4: <code>'text'</code></p> <p>The parsing method.</p> <p>The promise also has <code>.text()</code>, <code>.json()</code> and <code>.buffer()</code> methods which return another Got promise for the parsed body. It's like setting the options to <code>{responseType: 'json', resolveBodyOnly: true}</code> but without affecting the main Got promise.</p> <pre><code>import got from \"got\";\nconst responsePromise = got(\"https://httpbin.org/anything\");\nconst bufferPromise = responsePromise.buffer();\nconst jsonPromise = responsePromise.json();\nconst [response, buffer, json] = await Promise.all([\nresponsePromise,\nbufferPromise,\njsonPromise,\n]);\n// `response` is an instance of Got Response\n// `buffer` is an instance of Buffer\n// `json` is an object\n</code></pre> <p>Note</p> <p>When using streams, this option is ignored.</p> <p>Note</p> <p><code>'buffer'</code> will return the raw body buffer. Any modifications will also alter the result of <code>.text()</code> and <code>.json()</code>. Before overwriting the buffer, please copy it first via <code>Buffer.from(buffer)</code>.</p> <p>See https://github.com/nodejs/node/issues/27080</p>"},{"location":"2-options/#resolvebodyonly","title":"<code>resolveBodyOnly</code>","text":"<p>\u7c7b\u578b: <code>boolean</code> \u9ed8\u8ba4: <code>false</code></p> <p>If <code>true</code>, the promise will return the Response body instead of the Response object.</p> <pre><code>import got from \"got\";\nconst url = \"https://httpbin.org/anything\";\n// This:\nconst body = await got(url).json();\n// is semantically the same as this:\nconst body = await got(url, { responseType: \"json\", resolveBodyOnly: true });\n</code></pre>"},{"location":"2-options/#context","title":"<code>context</code>","text":"<p>\u7c7b\u578b: <code>object&lt;string, unknown&gt;</code> \u9ed8\u8ba4: <code>{}</code></p> <p>Note</p> <p>\u5185\u90e8\u7684\u4e0d\u53ef\u679a\u4e3e\u5c5e\u6027**\u6ca1\u6709**\u5408\u5e76\u3002</p> <p>\u5305\u542b\u7528\u6237\u6570\u636e\u3002\u5b83\u5bf9\u4e8e\u5b58\u50a8\u8ba4\u8bc1\u4ee4\u724c\u975e\u5e38\u6709\u7528:</p> <pre><code>import got from \"got\";\nconst instance = got.extend({\nhooks: {\nbeforeRequest: [\n(options) =&gt; {\nif (typeof options.context.token !== \"string\") {\nthrow new Error(\"Token required\");\n}\noptions.headers.token = options.context.token;\n},\n],\n},\n});\nconst context = {\ntoken: \"secret\",\n};\nconst { headers } = await instance(\"https://httpbin.org/headers\", {\ncontext,\n}).json();\nconsole.log(headers);\n//=&gt; {token: 'secret', \u2026}\n</code></pre> <p>\u8fd9\u4e2a\u9009\u9879\u662f\u53ef\u679a\u4e3e\u7684\u3002\u4e3a\u4e86\u5728\u5185\u90e8\u5b9a\u4e49\u4e0d\u53ef\u679a\u4e3e\u7684\u5c5e\u6027\uff0c\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c:</p> <pre><code>import got from \"got\";\nconst context = {};\nObject.defineProperties(context, {\ntoken: {\nvalue: \"secret\",\nenumerable: false,\nconfigurable: true,\nwritable: true,\n},\n});\nconst instance = got.extend({ context });\nconsole.log(instance.defaults.options.context);\n//=&gt; {}\n</code></pre> <p>\u5408\u5e76\u884c\u4e3a</p> <p>\u8986\u76d6\u73b0\u6709\u5c5e\u6027\u3002</p>"},{"location":"2-options/#cookiejar","title":"<code>cookieJar</code>","text":"<p>\u7c7b\u578b: <code>object | tough.cookieJar</code></p> <p>Note</p> <p>\u8bbe\u7f6e\u6b64\u9009\u9879\u5c06\u5bfc\u81f4 <code>cookie</code> \u62a5\u5934\u88ab\u8986\u76d6\u3002</p> <p>Cookie \u7684\u652f\u6301\u3002\u81ea\u52a8\u5904\u7406\u89e3\u6790\u548c\u5b58\u50a8\u3002</p> <pre><code>import got from \"got\";\nimport { CookieJar } from \"tough-cookie\";\nconst cookieJar = new CookieJar();\nawait cookieJar.setCookie(\"foo=bar\", \"https://example.com\");\nawait got(\"https://example.com\", { cookieJar });\n</code></pre>"},{"location":"2-options/#cookiejarsetcookie","title":"<code>cookieJar.setCookie</code>","text":"<p>\u7c7b\u578b: <code>(rawCookie: string, url: string) =&gt; void | Promise&lt;void&gt;</code></p> <p>See ToughCookie API for more information.</p>"},{"location":"2-options/#cookiejargetcookiestring","title":"<code>cookieJar.getCookieString</code>","text":"<p>\u7c7b\u578b: <code>(currentUrl: string) =&gt; string | Promise&lt;string&gt;</code></p> <p>\u53c2\u89c1 ToughCookie API \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002</p>"},{"location":"2-options/#ignoreinvalidcookies","title":"<code>ignoreInvalidCookies</code>","text":"<p>\u7c7b\u578b: <code>boolean</code> \u9ed8\u8ba4: <code>false</code></p> <p>\u5ffd\u7565\u65e0\u6548\u7684cookies\uff0c\u800c\u4e0d\u662f\u629b\u51fa\u9519\u8bef\u3002 \u4ec5\u5728\u8bbe\u7f6e\u4e86<code>cookieJar</code>\u9009\u9879\u65f6\u6709\u7528\u3002</p> <p>Note</p> <p>\u8fd9\u662f\u4e0d\u63a8\u8350\u7684!\u4f7f\u7528\u98ce\u9669\u81ea\u8d1f\u3002</p>"},{"location":"2-options/#followredirect","title":"<code>followRedirect</code>","text":"<p>\u7c7b\u578b: <code>boolean</code> \u9ed8\u8ba4: <code>true</code></p> <p>\u5b9a\u4e49\u662f\u5426\u5e94\u8be5\u81ea\u52a8\u8ddf\u968f\u91cd\u5b9a\u5411\u54cd\u5e94\u3002</p> <p>Note</p> <p>\u5982\u679c\u670d\u52a1\u5668\u5728\u54cd\u5e94\u4efb\u4f55\u8bf7\u6c42\u7c7b\u578b(POST, DELETE\u7b49)\u65f6\u53d1\u9001\u4e86<code>303</code>\uff0cGot\u5c06\u901a\u8fc7GET\u8bf7\u6c42\u6307\u5411\u4f4d\u7f6e\u5934\u4e2d\u7684\u8d44\u6e90\u3002 \u8fd9\u7b26\u5408\u89c4\u8303\u3002 \u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u4e3a\u5176\u4ed6\u91cd\u5b9a\u5411\u4ee3\u7801\u6253\u5f00\u8fd9\u4e2a\u884c\u4e3a-\u53c2\u89c1<code>methodRewriting</code></p> <pre><code>import got from \"got\";\nconst instance = got.extend({ followRedirect: false });\nconst response = await instance(\"http://google.com\");\nconsole.log(response.headers.location);\n//=&gt; 'https://google.com'\n</code></pre>"},{"location":"2-options/#maxredirects","title":"<code>maxRedirects</code>","text":"<p>\u7c7b\u578b: <code>number</code> \u9ed8\u8ba4: <code>10</code></p> <p>\u5982\u679c\u8d85\u51fa\uff0c\u8bf7\u6c42\u5c06\u88ab\u4e2d\u6b62\uff0c\u5e76\u629b\u51fa<code>MaxRedirectsError</code>\u3002</p> <pre><code>import got from \"got\";\nconst instance = got.extend({ maxRedirects: 3 });\ntry {\nawait instance(\"https://nghttp2.org/httpbin/absolute-redirect/5\");\n} catch (error) {\n//=&gt; 'Redirected 3 times. Aborting.'\nconsole.log(error.message);\n}\n</code></pre>"},{"location":"2-options/#decompress","title":"<code>decompress</code>","text":"<p>\u7c7b\u578b: <code>boolean</code> \u9ed8\u8ba4: <code>true</code></p> <p>\u81ea\u52a8\u89e3\u538b\u7f29\u54cd\u5e94\u3002\u8fd9\u5c06\u8bbe\u7f6e<code>accept-encoding</code>\u5934\u4e3a<code>gzip, deflate, br</code>\u3002</p> <p>\u5982\u679c\u7981\u7528\uff0c\u5219\u4f5c\u4e3a<code>Buffer</code>\u8fd4\u56de\u538b\u7f29\u54cd\u5e94\u3002 \u5982\u679c\u60a8\u60f3\u81ea\u5df1\u5904\u7406\u89e3\u538b\uff0c\u8fd9\u53ef\u80fd\u5f88\u6709\u7528\u3002</p> <pre><code>import got from \"got\";\nconst response = await got(\"https://google.com\");\nconsole.log(response.headers[\"content-encoding\"]);\n//=&gt; 'gzip'\n</code></pre>"},{"location":"2-options/#dnslookup","title":"<code>dnsLookup</code>","text":"<p>\u7c7b\u578b: <code>Function</code> \u9ed8\u8ba4: <code>dns.lookup</code></p> <p>\u81ea\u5b9a\u4e49DNS\u89e3\u6790\u903b\u8f91\u3002</p> <p>\u51fd\u6570\u7b7e\u540d\u4e0e<code>dns.lookup</code>\u76f8\u540c\u3002</p>"},{"location":"2-options/#dnscache","title":"<code>dnsCache</code>","text":"<p>\u7c7b\u578b: <code>CacheableLookup | false</code></p> <p>\u4e00\u4e2a\u7528\u4e8e\u8fdb\u884cDNS\u67e5\u627e\u7684 <code>CacheableLookup</code> \u5b9e\u4f8b\u3002 \u5728\u5411\u4e0d\u540c\u7684\u516c\u5171\u4e3b\u673a\u540d\u53d1\u51fa\u5927\u91cf\u8bf7\u6c42\u65f6\u975e\u5e38\u6709\u7528\u3002</p> <p>Note</p> <ul> <li>\u5f53\u5411\u5185\u90e8\u4e3b\u673a\u540d(\u5982localhost\u3001databasel.local\u7b49)\u53d1\u51fa\u8bf7\u6c42\u65f6\uff0c\u8be5\u529f\u80fd\u5e94\u8be5\u4fdd\u6301\u7981\u7528\u72b6\u6001\u3002</li> <li>CacheableLookup\u5728\u540e\u53f0\u4f7f\u7528 <code>dns.resolver4(\u2026)</code>\u548c<code>dns.resolver6(\u2026)</code>\uff0c\u5f53\u524d\u4e24\u4e2a\u5931\u8d25\u65f6\u8fd4\u56de\u5230<code>dns.lookup(\u2026)</code>\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u989d\u5916\u7684\u5ef6\u8fdf\u3002</li> </ul>"},{"location":"2-options/#dnslookupipversion","title":"<code>dnsLookupIpVersion</code>","text":"<p>\u7c7b\u578b: <code>4 | 6</code> \u9ed8\u8ba4: <code>undefined</code></p> <p>\u8981\u4f7f\u7528\u7684IP\u7248\u672c\u3002\u6307\u5b9a<code>undefined</code> \u5c06\u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\u3002</p>"},{"location":"2-options/#request","title":"<code>request</code>","text":"<p>\u7c7b\u578b: <code>Function&lt;ClientRequest | IncomingMessage&gt; | AsyncFunction&lt;ClientRequest | IncomingMessage&gt;</code> \u9ed8\u8ba4: <code>http.request | https.request</code> (depending on the protocol)</p> <p>\u81ea\u5b9a\u4e49\u8bf7\u6c42\u51fd\u6570\u3002</p> <p>\u8fd9\u6837\u505a\u7684\u4e3b\u8981\u76ee\u7684\u662f\u4f7f\u7528\u5305\u88c5\u5668\u652f\u6301HTTP/2.</p>"},{"location":"2-options/#cache","title":"<code>cache</code>","text":"<p>\u7c7b\u578b: <code>object | false</code> \u9ed8\u8ba4: <code>false</code></p> <p>\u7f13\u5b58\u9002\u914d\u5668\u5b9e\u4f8b\u7528\u4e8e\u5b58\u50a8\u7f13\u5b58\u7684\u54cd\u5e94\u6570\u636e\u3002</p>"},{"location":"2-options/#cacheoptions","title":"<code>cacheOptions</code>","text":"<p>\u7c7b\u578b: <code>object</code> \u9ed8\u8ba4: <code>{}</code></p> <p>\u7f13\u5b58\u9009\u9879\u7528\u4e8e\u6307\u5b9a\u8bf7\u6c42\u3002</p>"},{"location":"2-options/#http2","title":"<code>http2</code>","text":"<p>\u7c7b\u578b: <code>boolean</code> \u9ed8\u8ba4: <code>false</code></p> <p>Note</p> <p>\u6b64\u9009\u9879\u9700\u8981Node.js 15.10.0\u6216\u66f4\u65b0\u7248\u672c\uff0c\u56e0\u4e3a\u65e7\u7248\u672c\u7684Node.js\u5bf9HTTP/2\u7684\u652f\u6301\u975e\u5e38\u9519\u8bef\u3002</p> <p>\u5982\u679c<code>true</code>\uff0c <code>request</code>\u9009\u9879\u5c06\u9ed8\u8ba4\u4e3a<code>http2wrapper.auto</code>\uff0c\u6574\u4e2a<code>agent</code>\u5bf9\u8c61\u5c06\u88ab\u4f20\u9012\u3002</p> <p>Note</p> <p>\u4e3a\u4e86\u786e\u5b9a\u670d\u52a1\u5668\u662f\u5426\u771f\u6b63\u652f\u6301HTTP/2\uff0c\u5c06\u8fdb\u884cALPN\u534f\u5546\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5219\u4f7f\u7528HTTP/1.1\u3002</p> <p>Note</p> <p>\u5c06<code>request</code> \u9009\u9879\u8bbe\u7f6e\u4e3a<code>https.request</code>\u5c06\u7981\u7528HTTP/2\u7684\u4f7f\u7528\u3002\u5b83\u9700\u8981\u4f7f\u7528<code>http2wrapper.auto</code>\u3002</p> <p>Note</p> <p>\u6ca1\u6709\u76f4\u63a5\u7684<code>h2c</code>\u652f\u6301\u3002 \u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u5728<code>beforeRequest</code>\u94a9\u5b50\u4e2d\u63d0\u4f9b\u4e00\u4e2a<code>h2session</code>\u9009\u9879\u3002 \u53c2\u89c1\u4f8b\u5b50\u3002</p> <pre><code>import got from \"got\";\nconst { headers } = await got(\"https://httpbin.org/anything\", {\nhttp2: true,\n});\nconsole.log(headers[\":status\"]);\n//=&gt; 200\n</code></pre> <p>Note</p> <p>\u5f53\u524dGot\u7248\u672c\u53ef\u80fd\u4f7f\u7528\u65e7\u7248\u672c\u7684<code>http2-wrapper</code>\u3002 \u5982\u679c\u4f60\u60f3\u7528\u6700\u65b0\u7684\uff0c\u628a<code>request</code>\u8bbe\u7f6e\u4e3a<code>http2wrapper.auto</code>\uff0c\u628a<code>http2</code>\u8bbe\u7f6e\u4e3a<code>true</code>\u3002</p> <pre><code>import http2wrapper from \"http2-wrapper\";\nimport got from \"got\";\nconst { headers } = await got(\"https://httpbin.org/anything\", {\nhttp2: true,\nrequest: http2wrapper.auto,\n});\nconsole.log(headers[\":status\"]);\n//=&gt; 200\n</code></pre> <p>\u8bf7\u53c2\u9605<code>http2-wrapper</code> \u6587\u6863\u4e86\u89e3\u6709\u5173\u4ee3\u7406\u548c\u4ee3\u7406\u652f\u6301\u7684\u66f4\u591a\u4fe1\u606f\u3002</p>"},{"location":"2-options/#agent","title":"<code>agent</code>","text":"<p>\u7c7b\u578b: <code>object</code> \u9ed8\u8ba4: <code>{}</code></p> <p>\u4e00\u4e2a\u5177\u6709<code>http</code>, <code>https</code> \u548c <code>http2</code>\u5c5e\u6027\u7684\u5bf9\u8c61\u3002</p> <p>Got\u5c06\u81ea\u52a8\u89e3\u6790\u534f\u8bae\u5e76\u4f7f\u7528\u76f8\u5e94\u7684\u4ee3\u7406\u3002\u9ed8\u8ba4\u503c\u4e3a:</p> <pre><code>{\nhttp: http.globalAgent,\nhttps: https.globalAgent,\nhttp2: http2.globalAgent\n}\n</code></pre> <p>Note</p> <p>HTTP/2<code>Agent</code>\u5fc5\u987b\u662f <code>http2wrapper.Agent</code>\u7684\u5b9e\u4f8b</p>"},{"location":"2-options/#throwhttperrors","title":"<code>throwHttpErrors</code>","text":"<p>\u7c7b\u578b: <code>boolean</code> \u9ed8\u8ba4: <code>true</code></p> <p>\u5982\u679c<code>true</code>\uff0c\u5f53\u72b6\u6001\u7801\u4e0d\u662f<code>2xx</code> / <code>3xx</code>\u65f6\uff0c\u5b83\u5c06\u629b\u51fa\u3002</p> <p>\u5982\u679c\u7981\u7528\u6b64\u529f\u80fd\uff0c\u5219\u9047\u5230\u9519\u8bef\u72b6\u6001\u7801\u7684\u8bf7\u6c42\u5c06\u901a\u8fc7\u54cd\u5e94\u800c\u4e0d\u662f\u629b\u51fa\u6765\u89e3\u51b3\u3002 \u5982\u679c\u60a8\u6b63\u5728\u68c0\u67e5\u8d44\u6e90\u53ef\u7528\u6027\u5e76\u671f\u671b\u5f97\u5230\u9519\u8bef\u54cd\u5e94\uff0c\u8fd9\u53ef\u80fd\u5f88\u6709\u7528\u3002</p>"},{"location":"2-options/#username","title":"<code>username</code>","text":"<p>\u7c7b\u578b: <code>string</code> \u9ed8\u8ba4: <code>''</code></p> <p>\u7528\u4e8e\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1\u7684<code>username</code>.</p>"},{"location":"2-options/#password","title":"<code>password</code>","text":"<p>\u7c7b\u578b: <code>string</code> \u9ed8\u8ba4: <code>''</code></p> <p>\u7528\u4e8e\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1\u7684<code>password</code>.</p>"},{"location":"2-options/#localaddress","title":"<code>localAddress</code>","text":"<p>\u7c7b\u578b: <code>string | undefined</code> \u9ed8\u8ba4: <code>undefined</code></p> <p>\u53d1\u51fa\u8bf7\u6c42\u7684\u672c\u5730IP\u5730\u5740\u3002</p>"},{"location":"2-options/#createconnection","title":"<code>createConnection</code>","text":"<p>\u7c7b\u578b: <code>Function | undefined</code> \u9ed8\u8ba4: <code>undefined</code></p> <p>\u5f53\u672a\u4f7f\u7528 <code>agent</code> \u9009\u9879\u65f6\uff0c\u7528\u4e8e\u68c0\u7d22<code>net.Socket</code>\u5b9e\u4f8b\u7684\u51fd\u6570\u3002</p>"},{"location":"2-options/#https","title":"<code>https</code>","text":"<p>\u7c7b\u578b: <code>object</code></p> <p>\u53c2\u89c1\u9ad8\u7ea7HTTPS API.</p>"},{"location":"2-options/#pagination","title":"<code>pagination</code>","text":"<p>\u7c7b\u578b: <code>object</code></p> <p>\u53c2\u89c1\u5206\u9875API.</p>"},{"location":"2-options/#sethost","title":"<code>setHost</code>","text":"<p>\u7c7b\u578b: <code>boolean</code> \u9ed8\u8ba4: <code>true</code></p> <p>\u6307\u5b9a\u662f\u5426\u81ea\u52a8\u6dfb\u52a0 <code>Host</code> \u6807\u5934\u3002</p>"},{"location":"2-options/#maxheadersize","title":"<code>maxHeaderSize</code>","text":"<p>\u7c7b\u578b: <code>number | undefined</code> \u9ed8\u8ba4: <code>undefined</code></p> <p>\u53ef\u9009\u5730\u8986\u76d6<code>--max-http-header-size</code>\u7684\u503c(\u9ed8\u8ba4 16KB: <code>16384</code>).</p>"},{"location":"2-options/#methodrewriting","title":"<code>methodRewriting</code>","text":"<p>\u7c7b\u578b: <code>boolean</code> \u9ed8\u8ba4: <code>false</code></p> <p>\u6307\u5b9aHTTP\u8bf7\u6c42\u65b9\u6cd5\u5728\u91cd\u5b9a\u5411\u65f6\u662f\u5426\u5e94\u8be5\u91cd\u5199\u4e3a<code>GET</code>\u3002</p> <p>\u7531\u4e8e\u89c4\u8303\u503e\u5411\u4e8e\u53ea\u5728<code>303</code>\u54cd\u5e94\u4e0a\u91cd\u5199HTTP\u65b9\u6cd5\uff0c\u8fd9\u662fGot\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 \u5c06<code>methodRewriting</code>\u8bbe\u7f6e\u4e3a<code>true</code>\u4e5f\u4f1a\u91cd\u5199<code>301</code>\u548c<code>302</code>\u54cd\u5e94\uff0c\u6b63\u5982\u89c4\u8303\u6240\u5141\u8bb8\u7684\u90a3\u6837\u3002 \u8fd9\u662f <code>curl</code> \u548c\u6d4f\u89c8\u5668\u6240\u9075\u5faa\u7684\u884c\u4e3a\u3002</p> <p>Note</p> <p>Got\u4ece\u4e0d\u5bf9<code>307</code> \u548c <code>308</code>\u54cd\u5e94\u6267\u884c\u65b9\u6cd5\u91cd\u5199\uff0c\u56e0\u4e3a\u8fd9\u662f\u89c4\u8303\u660e\u786e\u7981\u6b62\u7684.</p>"},{"location":"2-options/#enableunixsockets","title":"<code>enableUnixSockets</code>","text":"<p>\u7c7b\u578b: <code>boolean</code> \u9ed8\u8ba4: <code>true</code></p> <p>\u5f53\u542f\u7528\u65f6\uff0c\u8bf7\u6c42\u4e5f\u53ef\u4ee5\u901a\u8fc7UNIX\u57df\u5957\u63a5\u5b57\u53d1\u9001\u3002 \u8bf7\u6ce8\u610f\uff0c\u5728\u5373\u5c06\u5230\u6765\u7684\u4e3b\u8981\u7248\u672c(Got v13)\u4e2d\uff0c\u51fa\u4e8e\u5b89\u5168\u539f\u56e0\uff0c\u6b64\u9ed8\u8ba4\u503c\u5c06\u66f4\u6539\u4e3a<code>false</code> \u3002</p> <p>!!! Warning</p> <pre><code>\u5982\u679c\u63a5\u53d7\u4e0d\u53d7\u4fe1\u4efb\u7684\u7528\u6237\u8f93\u5165URL\uff0c\u8bf7\u786e\u4fdd\u6267\u884c\u81ea\u5df1\u7684URL\u6d88\u6bd2\u3002\n</code></pre> <p>\u4f7f\u7528\u4ee5\u4e0bURL\u65b9\u6848: <code>PROTOCOL://unix:SOCKET:PATH</code></p> <ul> <li><code>PROTOCOL</code> - <code>http</code> \u6216 <code>https</code></li> <li><code>SOCKET</code> - \u4f8b\u5982\uff0cUNIX\u57df\u5957\u63a5\u5b57\u7684\u7edd\u5bf9\u8def\u5f84: <code>/var/run/docker.sock</code></li> <li><code>PATH</code> - \u4f8b\u5982\uff0c\u8bf7\u6c42\u8def\u5f84: <code>/v2/keys</code></li> </ul> <pre><code>import got from \"got\";\nawait got(\"http://unix:/var/run/docker.sock:/containers/json\", {\nenableUnixSockets: true,\n});\n// Or without protocol (HTTP by default)\nawait got(\"unix:/var/run/docker.sock:/containers/json\", {\nenableUnixSockets: true,\n});\n// Disable Unix sockets\nconst gotUnixSocketsDisabled = got.extend({ enableUnixSockets: false });\n// RequestError: Using UNIX domain sockets but option `enableUnixSockets` is not enabled\nawait gotUnixSocketsDisabled(\n\"http://unix:/var/run/docker.sock:/containers/json\"\n);\n</code></pre>"},{"location":"2-options/#_6","title":"\u65b9\u6cd5","text":""},{"location":"2-options/#optionsmergeother-options-optionsinit","title":"<code>options.merge(other: Options | OptionsInit)</code>","text":"<p>\u5c06<code>other</code> \u5408\u5e76\u5230\u5f53\u524d\u5b9e\u4f8b\u4e2d\u3002</p> <p>\u5982\u679c\u4f60\u67e5\u770b\u6e90\u4ee3\u7801\uff0c\u4f60\u4f1a\u6ce8\u610f\u5230\u5185\u90e8\u6709\u4e00\u4e2a <code>this._merging</code> \u5c5e\u6027\u3002 \u5f53\u5b83\u4e3a<code>true</code>\u65f6\uff0cSetters \u7684\u5de5\u4f5c\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\u3002</p>"},{"location":"2-options/#optionstojson","title":"<code>options.toJSON()</code>","text":"<p>\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u666e\u901a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u5b58\u50a8\u4e3aJSON.</p>"},{"location":"2-options/#optionscreatenativerequestoptions","title":"<code>options.createNativeRequestOptions()</code>","text":"<p>\u4e3a\u672c\u5730Node.js HTTP\u8bf7\u6c42\u9009\u9879\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61\u3002</p> <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u5c06Got\u9009\u9879\u8f6c\u6362\u4e3aNode.js\u9009\u9879\u3002</p> <p>Note</p> <p>\u5176\u4ed6\u4e00\u4e9b\u4e1c\u897f\uff0c\u6bd4\u5982\u8d85\u65f6\uff0c\u662f\u7531Got\u5185\u90e8\u5904\u7406\u7684\u3002</p>"},{"location":"2-options/#optionsgetrequestfunction","title":"<code>options.getRequestFunction()</code>","text":"<p>\u8fd4\u56de\u7528\u4e8e\u53d1\u51fa\u8bf7\u6c42\u7684 <code>http.request</code>-like \u51fd\u6570\u3002</p>"},{"location":"2-options/#optionsfreeze","title":"<code>options.freeze()</code>","text":"<p>\u4f7f\u6574\u4e2a <code>Options</code> \u5b9e\u4f8b\u53ea\u8bfb\u3002</p>"},{"location":"3-streams/","title":"\u6d41 API","text":""},{"location":"3-streams/#_1","title":"\u6784\u9020\u51fd\u6570","text":"<p>\u6e90\u7801: <code>source/core/index.ts</code></p> <p><code>got.stream(url, options, defaults)</code></p> <p><code>got(url, {...options, isStream: true}, defaults)</code></p> <p>\u4e0a\u9762\u7684\u4e24\u4e2a\u51fd\u6570\u7531 <code>got</code> \u4e3b\u754c\u9762\u516c\u5f00\uff0c\u5e76\u8fd4\u56de <code>Request</code> \u7684\u4e00\u4e2a\u65b0\u5b9e\u4f8b\u3002</p> <p><code>new Request(url, options, defaults)</code></p> <p>Extends: <code>Duplex</code> stream</p> <p>\u6b64\u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e0e Got \u627f\u8bfa\u76f8\u540c\u7684\u53c2\u6570\u3002</p> <p>Note</p> <p>\u5f53\u8fde\u63a5\u5230 <code>ServerResponse</code> \u65f6\uff0c\u5934\u5c06\u88ab\u81ea\u52a8\u590d\u5236\u3002 \u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u884c\u4e3a\uff0c\u4f60\u9700\u8981\u8986\u76d6\u4e00\u4e2a <code>beforeRequest</code> \u94a9\u5b50\u4e2d\u7684\u8bf7\u6c42\u5934\u3002</p> <p>Note</p> <p>\u5982\u679c\u4f7f\u7528 <code>body</code> \uff0c  <code>json</code> \u6216 <code>form</code> \u9009\u9879\uff0c\u6b64\u6d41\u5c06\u662f\u53ea\u8bfb\u7684\u3002</p> <p>Note</p> <ul> <li>\u5f53 <code>got.post('https://example.com')</code> \u88ab\u89e3\u6790\u65f6\uff0c <code>got.stream.post('https://example.com')</code> \u5c06\u65e0\u9650\u671f\u6302\u8d77\uff0c\u76f4\u5230\u63d0\u4f9b\u6b63\u6587\u3002</li> <li>\u5982\u679c\u6545\u610f\u6ca1\u6709body\uff0c\u8bf7\u8bb0\u4f4f <code>stream.end()</code> \u6216\u5c06body\u9009\u9879\u8bbe\u7f6e\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002</li> </ul> <pre><code>import { promisify } from \"node:util\";\nimport stream from \"node:stream\";\nimport fs from \"node:fs\";\nimport got from \"got\";\nconst pipeline = promisify(stream.pipeline);\n// \u8fd9\u4e2a\u793a\u4f8b\u5c06URL\u7684GET\u54cd\u5e94\u6d41\u5f0f\u4f20\u8f93\u5230\u6587\u4ef6\u3002\nawait pipeline(\ngot.stream(\"https://sindresorhus.com\"),\nfs.createWriteStream(\"index.html\")\n);\n// \u5bf9\u4e8ePOST, PUT, PATCH\u548cDELETE\u65b9\u6cd5\uff0c `got.stream` \u8fd4\u56de\u4e00\u4e2a `stream.Writable` \u3002\n// \u8fd9\u4e2a\u4f8b\u5b50\u5c06\u4e00\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9post\u5230\u4e00\u4e2aURL\u3002\nawait pipeline(\nfs.createReadStream(\"index.html\"),\ngot.stream.post(\"https://sindresorhus.com\"),\nnew stream.PassThrough()\n);\n// \u4e3a\u4e86\u5728\u6ca1\u6709\u8bf7\u6c42\u4f53\u7684\u60c5\u51b5\u4e0bPOST\u3001PUT\u3001PATCH\u6216DELETE\uff0c\u663e\u5f0f\u5730\u6307\u5b9a\u4e00\u4e2a\u7a7a\u4f53:\nawait pipeline(\ngot.stream.post(\"https://sindresorhus.com\", { body: \"\" }),\nnew stream.PassThrough()\n);\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u4e3a\u4e86\u6355\u6349\u8bfb\u53d6\u9519\u8bef\uff0c <code>new stream.PassThrough()</code> \u662f\u5fc5\u9700\u7684\u3002 \u5982\u679c\u6ca1\u6709\uff0c\u90a3\u4e48 <code>pipeline</code> \u5c06\u4e0d\u4f1a\u6355\u83b7\u4efb\u4f55\u8bfb\u53d6\u9519\u8bef\uff0c\u56e0\u4e3a\u6ca1\u6709\u6d41\u53ef\u4ee5\u7ba1\u9053\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u53ea\u5728\u5199\u5165\u65f6\u68c0\u67e5\u9519\u8bef\u3002</p> <p>Tip</p> <ul> <li>\u907f\u514d\u4f7f\u7528 <code>from.pipe(to)</code> \uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u8f6c\u53d1\u9519\u8bef\u3002</li> </ul>"},{"location":"3-streams/#_2","title":"\u9009\u9879","text":""},{"location":"3-streams/#streamoptions","title":"<code>stream.options</code>","text":"<p>\u7c7b\u578b: <code>Options</code></p> <p>\u7528\u4e8e\u53d1\u51fa\u8bf7\u6c42\u7684\u9009\u9879\u3002</p>"},{"location":"3-streams/#streamresponse","title":"<code>stream.response</code>","text":"<p>\u7c7b\u578b: <code>IncomingMessage</code></p> <p>\u5e95\u5c42\u7684 <code>IncomingMessage</code> \u5b9e\u4f8b\u3002</p>"},{"location":"3-streams/#streamrequesturl","title":"<code>stream.requestUrl</code>","text":"<p>\u7c7b\u578b: <code>URL</code></p> <p>\u8fd9\u6b21\u5c1d\u8bd5\u4e2d\u7684\u5f53\u524d\u201cURL\u201d\u5bf9\u8c61\u3002</p>"},{"location":"3-streams/#streamredirecturls","title":"<code>stream.redirectUrls</code>","text":"<p>\u7c7b\u578b: <code>URL[]</code></p> <p>\u8fde\u7eed\u8bf7\u6c42\u7684 url \u6570\u7ec4\u3002</p>"},{"location":"3-streams/#streamretrycount","title":"<code>stream.retryCount</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>\u5f53\u524d\u91cd\u8bd5\u8ba1\u6570\u3002</p> <p>Note</p> <ul> <li>\u91cd\u8bd5\u65f6\u5fc5\u987b\u91cd\u5199\u3002</li> </ul>"},{"location":"3-streams/#streamip","title":"<code>stream.ip</code>","text":"<p>\u7c7b\u578b: <code>string | undefined</code></p> <p>\u76ee\u7684 IP \u5730\u5740\u3002</p>"},{"location":"3-streams/#streamisaborted","title":"<code>stream.isAborted</code>","text":"<p>\u7c7b\u578b: <code>boolean</code></p> <p>\u8bf7\u6c42\u662f\u5426\u88ab\u4e2d\u6b62\u3002</p>"},{"location":"3-streams/#streamsocket","title":"<code>stream.socket</code>","text":"<p>\u7c7b\u578b: <code>net.Socket | tls.Socket | undefined</code></p> <p>\u7528\u4e8e\u6b64\u7279\u5b9a\u8bf7\u6c42\u7684\u5957\u63a5\u5b57\u3002</p>"},{"location":"3-streams/#streamdownloadprogress","title":"<code>stream.downloadProgress</code>","text":"<p>\u7c7b\u578b: <code>Progress</code></p> <p>\u8868\u793a\u5df2\u4e0b\u8f7d\u6570\u636e\u91cf\u7684\u5bf9\u8c61\u3002</p>"},{"location":"3-streams/#streamuploadprogress","title":"<code>stream.uploadProgress</code>","text":"<p>\u7c7b\u578b: <code>Progress</code></p> <p>\u8868\u793a\u5df2\u4e0a\u4f20\u6570\u636e\u91cf\u7684\u5bf9\u8c61\u3002</p> <p>Note</p> <ul> <li>\u5f53\u4e00\u4e2achunk\u5927\u4e8e <code>highWaterMark</code> \u65f6\uff0c\u8fdb\u5ea6\u5c06\u4e0d\u4f1a\u88ab\u89e6\u53d1\u3002\u4f53\u9700\u8981\u88ab\u5206\u6210\u51e0\u5757\u3002</li> </ul> <pre><code>import got from \"got\";\nconst body = Buffer.alloc(1024 * 1024); // 1MB\nfunction* chunkify(buffer, chunkSize = 64 * 1024) {\nfor (let pos = 0; pos &lt; buffer.byteLength; pos += chunkSize) {\nyield buffer.subarray(pos, pos + chunkSize);\n}\n}\nconst stream = got.stream.post(\"https://httpbin.org/anything\", {\nbody: chunkify(body),\n});\nstream.resume();\nstream.on(\"uploadProgress\", (progress) =    {\nconsole.log(progress);\n});\n</code></pre>"},{"location":"3-streams/#streamtimings","title":"<code>stream.timings</code>","text":"<p>\u7c7b\u578b: <code>Timings</code></p> <p>An object representing performance information.</p> <p>To generate the timings, Got uses the <code>http-timer</code> package.</p>"},{"location":"3-streams/#streamisfromcache","title":"<code>stream.isFromCache</code>","text":"<p>\u7c7b\u578b: <code>boolean | undefined</code></p> <p>Whether the response has been fetched from cache.</p>"},{"location":"3-streams/#streamreusedsocket","title":"<code>stream.reusedSocket</code>","text":"<p>\u7c7b\u578b: <code>boolean</code></p> <p>Whether the socket was used for other previous requests.</p>"},{"location":"3-streams/#events","title":"Events","text":""},{"location":"3-streams/#streamonresponse","title":"<code>stream.on('response', \u2026)</code>","text":""},{"location":"3-streams/#response","title":"<code>response</code>","text":"<p>\u7c7b\u578b: <code>PlainResponse</code></p> <p>This is emitted when a HTTP response is received.</p> <pre><code>import { pipeline } from \"node:stream/promises\";\nimport { createWriteStream } from \"node:fs\";\nimport got from \"got\";\nconst readStream = got.stream(\"http://example.com/image.png\", {\nthrowHttpErrors: false,\n});\nconst onError = (error) =    {\n// Do something with it.\n};\nreadStream.on(\"response\", async (response) =    {\nif (response.headers.age     3600) {\nconsole.log(\"Failure - response too old\");\nreadStream.destroy(); // Destroy the stream to prevent hanging resources.\nreturn;\n}\n// Prevent `onError` being called twice.\nreadStream.off(\"error\", onError);\ntry {\nawait pipeline(readStream, createWriteStream(\"image.png\"));\nconsole.log(\"Success\");\n} catch (error) {\nonError(error);\n}\n});\nreadStream.once(\"error\", onError);\n</code></pre>"},{"location":"3-streams/#streamondownloadprogress","title":"<code>stream.on('downloadProgress', \u2026)</code>","text":""},{"location":"3-streams/#progress","title":"<code>progress</code>","text":"<p>\u7c7b\u578b: <code>Progress</code></p> <p>This is emitted on every time <code>stream.downloadProgress</code> is updated.</p>"},{"location":"3-streams/#streamonuploadprogress","title":"<code>stream.on('uploadProgress', \u2026)</code>","text":""},{"location":"3-streams/#progress_1","title":"<code>progress</code>","text":"<p>\u7c7b\u578b: <code>Progress</code></p> <p>This is emitted on every time <code>stream.uploadProgress</code> is updated.</p> <p></p>"},{"location":"3-streams/#streamonretry","title":"<code>stream.on('retry', \u2026)</code>","text":"<p>To enable retrying when using streams, a retry handler must be attached.</p> <p>When this event is emitted, you should reset the stream you were writing to and prepare the body again.</p> <p>Note</p> <ul> <li><code>HTTPError</code>s cannot be retried if <code>options.throwHttpErrors</code> is <code>false</code>.   This is because stream data is saved to <code>error.response.body</code> and streams can be read only once.</li> <li>For the Promise API, there is no such limitation.</li> </ul>"},{"location":"3-streams/#retrycount","title":"<code>retryCount</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>The current retry count.</p>"},{"location":"3-streams/#error","title":"<code>error</code>","text":"<p>\u7c7b\u578b: <code>RequestError</code></p> <p>The error that caused this retry.</p>"},{"location":"3-streams/#createretrystream","title":"<code>createRetryStream</code>","text":"<p>\u7c7b\u578b: <code>(options?: OptionsInit) =    Request</code></p> <pre><code>import fs from \"node:fs\";\nimport got from \"got\";\nlet writeStream;\nconst fn = (retryStream) =    {\nconst options = {\nheaders: {\nfoo: \"bar\",\n},\n};\nconst stream = retryStream ?? got.stream(\"https://example.com\", options);\nif (writeStream) {\nwriteStream.destroy();\n}\nwriteStream = fs.createWriteStream(\"example-com.html\");\nstream.pipe(writeStream);\n// If you don't attach the listener, it will NOT make a retry.\n// It automatically checks the listener count so it knows whether to retry or not :)\nstream.once(\"retry\", (retryCount, error, createRetryStream) =    {\nfn(createRetryStream()); // or: fn(createRetryStream(optionsToMerge))\n});\n};\nfn();\n</code></pre>"},{"location":"3-streams/#streamonredirect","title":"<code>stream.on('redirect', \u2026)</code>","text":""},{"location":"3-streams/#updatedoptions","title":"<code>updatedOptions</code>","text":"<p>\u7c7b\u578b: <code>Options</code></p> <p>The new options used to make the next request.</p>"},{"location":"3-streams/#response_1","title":"<code>response</code>","text":"<p>\u7c7b\u578b: <code>IncomingMessage</code></p> <p>The <code>IncomingMessage</code> instance the redirect came from.</p>"},{"location":"3-streams/#internal-usage","title":"Internal usage","text":"<p>This are the functions used internally by Got. Other non-documented functions are private and should not be accessible.</p>"},{"location":"3-streams/#streamflush","title":"<code>stream.flush()</code>","text":"<p>This function is executed automatically by Got. It marks the current stream as ready. If an error occurs before <code>stream.flush()</code> is called, it's thrown immediately after <code>stream.flush()</code>.</p>"},{"location":"3-streams/#stream_beforeerrorerror","title":"<code>stream._beforeError(error)</code>","text":"<p>This function is called instead <code>stream.destroy(error)</code>, required in order to exectue async logic, such as reading the response (e.g. when <code>ERR_NON_2XX_3XX_RESPONSE</code> occurs).</p>"},{"location":"3-streams/#stream_nopipe","title":"<code>stream._noPipe</code>","text":"<p>\u7c7b\u578b: <code>boolean</code></p> <p>Whether piping is disabled or not. This property is used by the Promise API.</p>"},{"location":"3-streams/#response_2","title":"<code>Response</code>","text":"<p>\u6e90\u7801: <code>source/core/response.ts</code></p> <p>Extends: <code>IncomingMessage</code></p>"},{"location":"3-streams/#requesturl","title":"<code>requestUrl</code>","text":"<p>\u7c7b\u578b: <code>URL</code></p> <p>The original request URL. It is the first argument when calling <code>got(\u2026)</code>.</p>"},{"location":"3-streams/#redirecturls","title":"<code>redirectUrls</code>","text":"<p>\u7c7b\u578b: <code>URL[]</code></p> <p>The redirect URLs.</p>"},{"location":"3-streams/#request","title":"<code>request</code>","text":"<p>\u7c7b\u578b: <code>Request</code></p> <p>The underlying Got stream.</p>"},{"location":"3-streams/#ip","title":"<code>ip</code>","text":"<p>\u7c7b\u578b: <code>string</code></p> <p>The server's IP address.</p> <p>Note</p> <ul> <li>Not available when the response is cached.</li> </ul>"},{"location":"3-streams/#isfromcache","title":"<code>isFromCache</code>","text":"<p>\u7c7b\u578b: <code>boolean</code></p> <p>Whether the response comes from cache or not.</p>"},{"location":"3-streams/#ok","title":"<code>ok</code>","text":"<p>\u7c7b\u578b: <code>boolean</code></p> <p>Whether the response was successful</p> <p>Note</p> <ul> <li>A request is successful when the status code of the final request is <code>2xx</code> or <code>3xx</code>.</li> <li>When following redirects, a request is successful only when the status code of the final request is <code>2xx</code>.</li> <li><code>304</code> responses are always considered successful.</li> <li>Got throws automatically when <code>response.ok</code> is <code>false</code> and <code>throwHttpErrors</code> is <code>true</code>.</li> </ul>"},{"location":"3-streams/#statuscode","title":"<code>statusCode</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>The HTTP status code.</p>"},{"location":"3-streams/#url","title":"<code>url</code>","text":"<p>\u7c7b\u578b: <code>string</code></p> <p>The final URL after all redirects.</p>"},{"location":"3-streams/#timings","title":"<code>timings</code>","text":"<p>\u7c7b\u578b: <code>Timings</code></p> <p>The same as <code>request.timings</code>.</p>"},{"location":"3-streams/#retrycount_1","title":"<code>retryCount</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>The same as <code>request.retryCount</code>.</p>"},{"location":"3-streams/#rawbody","title":"<code>rawBody</code>","text":"<p>\u7c7b\u578b: <code>Buffer</code></p> <p>Note</p> <ul> <li>This property is only accessible when using Promise API.</li> </ul> <p>The raw response body buffer.</p>"},{"location":"3-streams/#body","title":"<code>body</code>","text":"<p>\u7c7b\u578b: <code>unknown</code></p> <p>Note</p> <ul> <li>This property is only accessible when using Promise API.</li> </ul> <p>The parsed response body.</p>"},{"location":"3-streams/#aborted","title":"<code>aborted</code>","text":"<p>\u7c7b\u578b: <code>boolean</code></p> <p>The same as <code>request.aborted</code>.</p>"},{"location":"3-streams/#complete","title":"<code>complete</code>","text":"<p>\u7c7b\u578b: <code>boolean</code></p> <p>If <code>true</code>, the response has been fully parsed.</p>"},{"location":"3-streams/#socket","title":"<code>socket</code>","text":"<p>\u7c7b\u578b: <code>net.Socket | tls.TLSSocket</code></p> <p>The same as <code>request.socket</code>.</p>"},{"location":"3-streams/#headers","title":"<code>headers</code>","text":"<p>\u7c7b\u578b: <code>object&lt;string, string&gt;</code></p> <p>The response headers.</p>"},{"location":"3-streams/#statusmessage","title":"<code>statusMessage</code>","text":"<p>\u7c7b\u578b: <code>string</code></p> <p>The status message corresponding to the status code.</p>"},{"location":"4-pagination/","title":"\u5206\u9875 API","text":"<p>\u6e90\u7801: <code>source/create.ts</code></p>"},{"location":"4-pagination/#how-does-the-link-header-work","title":"How does the <code>Link</code> header work?","text":"<p>The RFC5988 defines how the <code>Link</code> header looks like.</p> <p>When the response has been processed, Got looks for the reference of the <code>next</code> relation. This way Got knows the URL it should visit afterwards. The header can look like this:</p> <pre><code>Link: &lt;https://api.github.com/repositories/18193978/commits?page=2&gt;; rel=\"next\", &lt;https://api.github.com/repositories/18193978/commits?page=44&gt;; rel=\"last\"\n</code></pre> <p>By default, Got looks only at the <code>next</code> relation. To use other relations, you need to customize the <code>paginate</code> function below.</p>"},{"location":"4-pagination/#gotpaginateurl-options","title":"<code>got.paginate(url, options?)</code>","text":""},{"location":"4-pagination/#gotpaginateeachurl-options","title":"<code>got.paginate.each(url, options?)</code>","text":"<p>Returns an async iterator.</p> <p>This is memory efficient, as the logic is executed immediately when new data comes in.</p> <pre><code>import got from \"got\";\nconst countLimit = 10;\nconst pagination = got.paginate(\n\"https://api.github.com/repos/sindresorhus/got/commits\",\n{\npagination: { countLimit },\n}\n);\nconsole.log(`Printing latest ${countLimit} Got commits (newest to oldest):`);\nfor await (const commitData of pagination) {\nconsole.log(commitData.commit.message);\n}\n</code></pre>"},{"location":"4-pagination/#gotpaginateallurl-options","title":"<code>got.paginate.all(url, options?)</code>","text":"<p>Note:</p> <ul> <li>Querying a large dataset significantly increases memory usage.</li> </ul> <p>Returns a Promise for an array of all results.</p> <pre><code>import got from \"got\";\nconst countLimit = 10;\nconst results = await got.paginate.all(\n\"https://api.github.com/repos/sindresorhus/got/commits\",\n{\npagination: { countLimit },\n}\n);\nconsole.log(`Printing latest ${countLimit} Got commits (newest to oldest):`);\nconsole.log(results);\n</code></pre>"},{"location":"4-pagination/#pagination","title":"<code>pagination</code>","text":"<p>\u7c7b\u578b: <code>object</code> Default:</p> <pre><code>{\ntransform: (response: Response) =&gt; {\nif (response.request.options.responseType === 'json') {\nreturn response.body;\n}\nreturn JSON.parse(response.body as string);\n},\npaginate: ({response}) =&gt; {\nconst rawLinkHeader = response.headers.link;\nif (typeof rawLinkHeader !== 'string' || rawLinkHeader.trim() === '') {\nreturn false;\n}\nconst parsed = parseLinkHeader(rawLinkHeader);\nconst next = parsed.find(entry =&gt; entry.parameters.rel === 'next' || entry.parameters.rel === '\"next\"');\nif (next) {\nreturn {\nurl: new URL(next.reference, response.requestUrl)\n};\n}\nreturn false;\n},\nfilter: () =&gt; true,\nshouldContinue: () =&gt; true,\ncountLimit: Number.POSITIVE_INFINITY,\nbackoff: 0,\nrequestLimit: 10_000,\nstackAllItems: false\n}\n</code></pre> <p>This option represents the <code>pagination</code> object.</p>"},{"location":"4-pagination/#transform","title":"<code>transform</code>","text":"<p>\u7c7b\u578b: <code>Function</code> \u9ed8\u8ba4: <code>response =&gt; JSON.parse(response.body)</code></p> <p>A function that transforms <code>Response</code> into an array of items. This is where you should do the parsing.</p>"},{"location":"4-pagination/#paginate","title":"<code>paginate</code>","text":"<p>\u7c7b\u578b: <code>Function</code> \u9ed8\u8ba4: <code>Link</code> header logic</p> <p>The function takes an object with the following properties:</p> <ul> <li><code>response</code> - The current response object,</li> <li><code>currentItems</code> - Items from the current response,</li> <li><code>allItems</code> - An empty array, unless <code>stackAllItems</code> is <code>true</code>, otherwise it contains all emitted items.</li> </ul> <p>It should return an object representing Got options pointing to the next page. If there is no next page, <code>false</code> should be returned instead.</p> <p>The options are merged automatically with the previous request. Therefore the options returned by <code>pagination.paginate(\u2026)</code> must reflect changes only.</p> <p>Note:</p> <ul> <li>The <code>url</code> option (if set) accepts only a <code>URL</code> instance.   This prevents <code>prefixUrl</code> ambiguity. In order to use a relative URL string, merge it via <code>new URL(relativeUrl, response.url)</code>.</li> </ul>"},{"location":"4-pagination/#filter","title":"<code>filter</code>","text":"<p>\u7c7b\u578b: <code>Function</code> \u9ed8\u8ba4: <code>({item, currentItems, allItems}) =&gt; true</code></p> <p>Whether the item should be emitted or not.</p>"},{"location":"4-pagination/#shouldcontinue","title":"<code>shouldContinue</code>","text":"<p>\u7c7b\u578b: <code>Function</code> \u9ed8\u8ba4: <code>({item, currentItems, allItems}) =&gt; true</code></p> <p>Note:</p> <ul> <li>This function executes only when <code>filter</code> returns <code>true</code>.</li> </ul> <p>For example, if you need to stop before emitting an entry with some flag, you should use <code>({item}) =&gt; !item.flag</code>.</p> <p>If you want to stop after emitting the entry, you should use <code>({item, allItems}) =&gt; allItems.some(item =&gt; item.flag)</code> instead.</p>"},{"location":"4-pagination/#countlimit","title":"<code>countLimit</code>","text":"<p>\u7c7b\u578b: <code>number</code> \u9ed8\u8ba4: <code>Number.POSITIVE_INFINITY</code></p> <p>The maximum amount of items that should be emitted.</p>"},{"location":"4-pagination/#backoff","title":"<code>backoff</code>","text":"<p>\u7c7b\u578b: <code>number</code> \u9ed8\u8ba4: <code>0</code></p> <p>Milliseconds to wait before the next request is triggered.</p>"},{"location":"4-pagination/#requestlimit","title":"<code>requestLimit</code>","text":"<p>\u7c7b\u578b: <code>number</code> \u9ed8\u8ba4: <code>10000</code></p> <p>The maximum amount of request that should be triggered.</p> <p>Note:</p> <ul> <li>Retries on failure are not counted towards this limit.</li> </ul>"},{"location":"4-pagination/#stackallitems","title":"<code>stackAllItems</code>","text":"<p>\u7c7b\u578b: <code>boolean</code> \u9ed8\u8ba4: <code>false</code></p> <p>Defines how <code>allItems</code> is managed in <code>pagination.paginate</code>, <code>pagination.filter</code> and <code>pagination.shouldContinue</code>.</p> <p>By default, <code>allItems</code> is always an empty array. Setting this to <code>true</code> will significantly increase memory usage when working with a large dataset.</p>"},{"location":"4-pagination/#example","title":"Example","text":"<p>In this example we will use <code>searchParams</code> instead of <code>Link</code> header. Just to show how you can customize the <code>paginate</code> function.</p> <p>The reason <code>filter</code> looks exactly the same like <code>shouldContinue</code> is that the latter will tell Got to stop once we reach our timestamp. The <code>filter</code> function is needed as well, because in the same response we can get results with different timestamps.</p> <pre><code>import got from \"got\";\nimport Bourne from \"@hapi/bourne\";\nconst max = Date.now() - 1000 * 86400 * 7;\nconst iterator = got.paginate(\n\"https://api.github.com/repos/sindresorhus/got/commits\",\n{\npagination: {\npaginate: ({ response, currentItems }) =&gt; {\n// If there are no more data, finish.\nif (currentItems.length === 0) {\nreturn false;\n}\n// Get the current page number.\nconst { searchParams } = response.request.options;\nconst previousPage = Number(searchParams.get(\"page\") ?? 1);\n// Update the page number by one.\nreturn {\nsearchParams: {\npage: previousPage + 1,\n},\n};\n},\n// Using `Bourne` to prevent prototype pollution.\ntransform: (response) =&gt; Bourne.parse(response.body),\nfilter: ({ item }) =&gt; {\n// Check if the commit time exceeds our range.\nconst date = new Date(item.commit.committer.date);\nconst end = date.getTime() - max &gt;= 0;\nreturn end;\n},\nshouldContinue: ({ item }) =&gt; {\n// Check if the commit time exceeds our range.\nconst date = new Date(item.commit.committer.date);\nconst end = date.getTime() - max &gt;= 0;\nreturn end;\n},\n// We want only 50 results.\ncountLimit: 50,\n// Wait 1s before making another request to prevent API rate limiting.\nbackoff: 1000,\n// It is a good practice to set an upper limit of how many requests can be made.\n// This way we can avoid infinite loops.\nrequestLimit: 10,\n// In this case, we don't need to store all the items we receive.\n// They are processed immediately.\nstackAllItems: false,\n},\n}\n);\nconsole.log(\"Last 50 commits from now to week ago:\");\nfor await (const item of iterator) {\nconsole.log(item.commit.message.split(\"\\n\")[0]);\n}\n</code></pre>"},{"location":"5-https/","title":"\u9ad8\u7ea7 HTTPS API","text":""},{"location":"5-https/#https","title":"<code>https</code>","text":"<p>\u7c7b\u578b: <code>object</code></p> <p>\u6b64\u9009\u9879\u8868\u793a\u7528\u4e8e\u53d1\u51faHTTPS\u8bf7\u6c42\u7684\u9009\u9879\u3002</p>"},{"location":"5-https/#alpnprotocols","title":"<code>alpnProtocols</code>","text":"<p>\u7c7b\u578b: <code>string[]</code> \u9ed8\u8ba4: <code>['http/1.1']</code></p> <p>\u53ef\u63a5\u53d7\u7684ALPN\u534f\u8bae\u3002 \u5982\u679c<code>http2</code>\u9009\u9879\u4e3a<code>true</code>\uff0c\u5219\u9ed8\u8ba4\u4e3a<code>['h2', 'http/1.1']</code>\u3002</p>"},{"location":"5-https/#rejectunauthorized","title":"<code>rejectUnauthorized</code>","text":"<p>\u7c7b\u578b: <code>boolean</code> \u9ed8\u8ba4: <code>true</code></p> <p>\u5982\u679c\u4e3a<code>true</code>\uff0c\u5b83\u5c06\u629b\u51fa\u65e0\u6548\u8bc1\u4e66\uff0c\u4f8b\u5982\u8fc7\u671f\u6216\u81ea\u7b7e\u540d\u8bc1\u4e66\u3002</p>"},{"location":"5-https/#checkserveridentity","title":"<code>checkServerIdentity</code>","text":"<p>\u7c7b\u578b: <code>(hostname: string, certificate: DetailedPeerCertificate) =&gt; Error | undefined</code> \u9ed8\u8ba4: <code>tls.checkServerIdentity</code></p> <p>\u8bc1\u4e66\u7684\u81ea\u5b9a\u4e49\u68c0\u67e5\u3002\u7528\u4e8e\u56fa\u5b9a\u8bc1\u4e66\u3002</p> <p>\u5982\u679c\u68c0\u67e5\u6210\u529f\uff0c\u51fd\u6570\u5fc5\u987b\u8fd4\u56de<code>undefined</code>\u3002 \u5982\u679c\u5931\u8d25\uff0c\u5e94\u8be5\u8fd4\u56de<code>Error</code>\u3002</p> <p>Note</p> <p>\u4e3a\u4e86\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u8bc1\u4e66\u4e0d\u80fd\u8fc7\u671f\u3001\u4e0d\u80fd\u81ea\u7b7e\u540d\uff0c\u4e5f\u4e0d\u80fd\u4f7f\u7528\u4e0d\u53ef\u4fe1\u7684\u6839\u3002</p> <p>\u53c2\u8003Node.js\u6587\u6863\u3002</p>"},{"location":"5-https/#certificateauthority","title":"<code>certificateAuthority</code>","text":"<p>\u7c7b\u578b: <code>string | Buffer | string[] | Buffer[]</code></p> <p>Note</p> <p>\u8be5\u9009\u9879\u5df2\u4ece<code>ca</code> TLS option\u91cd\u547d\u540d\u4e3a\u66f4\u597d\u7684\u53ef\u8bfb\u6027\u3002</p> <p>\u8986\u76d6\u53d7\u4fe1\u4efb\u7684CA\u8bc1\u4e66\u3002</p> <p>\u9ed8\u8ba4\u4e3aMozilla\u63d0\u4f9b\u7684CAs.</p> <pre><code>import got from \"got\";\n// Single Certificate Authority\nawait got(\"https://example.com\", {\nhttps: {\ncertificateAuthority: fs.readFileSync(\"./my_ca.pem\"),\n},\n});\n</code></pre>"},{"location":"5-https/#key","title":"<code>key</code>","text":"<p>\u7c7b\u578b: <code>string | Buffer | string[] | Buffer[] | object[]</code></p> <p>PEM\u683c\u5f0f\u79c1\u94a5.</p> <p>\u5177\u6709\u4e0d\u540c\u5bc6\u7801\u77ed\u8bed\u7684\u591a\u4e2a\u5bc6\u94a5\u53ef\u4ee5\u4ee5<code>{pem: &lt;string | Buffer&gt;, passphrase: &lt;string&gt;}</code>\u6570\u7ec4\u7684\u5f62\u5f0f\u63d0\u4f9b\u3002</p> <p>Note</p> <p>\u52a0\u5bc6\u7684\u5bc6\u94a5\u5c06\u4f7f\u7528<code>https.passphrase</code>\u8fdb\u884c\u89e3\u5bc6\u3002</p>"},{"location":"5-https/#passphrase","title":"<code>passphrase</code>","text":"<p>\u7c7b\u578b: <code>string</code></p> <p>\u7528\u4e8e\u5355\u4e2a\u79c1\u94a5\u548c/\u6216PFX\u7684\u5171\u4eab\u5bc6\u7801\u77ed\u8bed\u3002</p>"},{"location":"5-https/#certificate","title":"<code>certificate</code>","text":"<p>\u7c7b\u578b: <code>string | Buffer | string[] | Buffer[]</code></p> <p>Note</p> <p>\u8be5\u9009\u9879\u5df2\u4ece<code>cert</code> TLS \u9009\u9879\u91cd\u547d\u540d\u4e3a\u66f4\u597d\u7684\u53ef\u8bfb\u6027\u3002</p> <p>PEM\u683c\u5f0f\u7684\u8bc1\u4e66\u94fe[https://en.wikipedia.org/wiki/X.509#Certificate_chains_and_cross-certification]\u3002</p> <p>\u6bcf\u4e2a\u79c1\u94a5\u5e94\u8be5\u63d0\u4f9b\u4e00\u4e2a\u8bc1\u4e66\u94fe\u3002</p> <p>\u5f53\u63d0\u4f9b\u591a\u4e2a\u8bc1\u4e66\u94fe\u65f6\uff0c\u5b83\u4eec\u4e0d\u5fc5\u4e0e\u201chttps.key\u201d\u4e2d\u7684\u79c1\u94a5\u987a\u5e8f\u76f8\u540c\u3002</p>"},{"location":"5-https/#pfx","title":"<code>pfx</code>","text":"<p>\u7c7b\u578b: <code>string | Buffer | string[] | Buffer[] | object[]</code></p> <p>PFX\u6216PKCS12\u7f16\u7801\u7684\u79c1\u94a5\u548c\u8bc1\u4e66\u94fe\u3002 \u4f7f\u7528<code>https.pfx</code>\u662f\u5355\u72ec\u63d0\u4f9b<code>https.key</code>\u548c<code>https.certificate</code>\u7684\u53e6\u4e00\u79cd\u9009\u62e9\u3002 PFX\u901a\u5e38\u662f\u52a0\u5bc6\u7684\uff0c\u7136\u540e\u4f7f\u7528<code>https.passphrase</code>\u6765\u89e3\u5bc6\u5b83\u3002</p> <p>\u591a\u4e2aPFX\u53ef\u4ee5\u4f5c\u4e3a\u672a\u52a0\u5bc6\u7f13\u51b2\u533a\u6570\u7ec4\u6216\u5bf9\u8c61\u6570\u7ec4\u63d0\u4f9b\uff0c\u5982:</p> <pre><code>{\nbuffer: string | Buffer,\npassphrase?: string\n}\n</code></pre>"},{"location":"5-https/#certificaterevocationlists","title":"<code>certificateRevocationLists</code>","text":"<p>\u7c7b\u578b: <code>string | Buffer | string[] | Buffer[]</code></p> <p>Note</p> <p>\u8be5\u9009\u9879\u5df2\u4ece<code>crl</code> TLS \u9009\u9879 \u91cd\u547d\u540d\u4e3a\u66f4\u597d\u7684\u53ef\u8bfb\u6027\u3002</p>"},{"location":"5-https/#https_1","title":"\u5176\u4ed6HTTPS\u9009\u9879","text":"<p>\u4ee5\u4e0b\u9009\u9879\u7684\u6587\u6863</p> <ul> <li><code>ciphers</code></li> <li><code>dhparam</code></li> <li><code>signatureAlgorithms</code> (\u4ece<code>sigalgs</code>\u91cd\u547d\u540d)</li> <li><code>minVersion</code></li> <li><code>maxVersion</code></li> <li><code>honorCipherOrder</code></li> <li><code>tlsSessionLifetime</code> (\u4ece<code>sessionTimeout</code>\u91cd\u547d\u540d)</li> <li><code>ecdhCurve</code></li> </ul>"},{"location":"5-https/#_1","title":"\u793a\u4f8b","text":"<pre><code>import got from \"got\";\n// \u5e26\u8bc1\u4e66\u7684\u5355\u5bc6\u94a5\nawait got(\"https://example.com\", {\nhttps: {\nkey: fs.readFileSync(\"./client_key.pem\"),\ncertificate: fs.readFileSync(\"./client_cert.pem\"),\n},\n});\n// \u5e26\u6709\u8bc1\u4e66\u7684\u591a\u4e2a\u5bc6\u94a5(\u987a\u5e8f\u6df7\u4e71)\nawait got(\"https://example.com\", {\nhttps: {\nkey: [fs.readFileSync(\"./client_key1.pem\"), fs.readFileSync(\"./client_key2.pem\")],\ncertificate: [fs.readFileSync(\"./client_cert2.pem\"), fs.readFileSync(\"./client_cert1.pem\")],\n},\n});\n// \u5355\u5bc6\u94a5\u4e0e\u5bc6\u7801\u77ed\u8bed\nawait got(\"https://example.com\", {\nhttps: {\nkey: fs.readFileSync(\"./client_key.pem\"),\ncertificate: fs.readFileSync(\"./client_cert.pem\"),\npassphrase: \"client_key_passphrase\",\n},\n});\n// \u5177\u6709\u4e0d\u540c\u5bc6\u7801\u7684\u591a\u4e2a\u5bc6\u94a5\nawait got(\"https://example.com\", {\nhttps: {\nkey: [\n{ pem: fs.readFileSync(\"./client_key1.pem\"), passphrase: \"passphrase1\" },\n{ pem: fs.readFileSync(\"./client_key2.pem\"), passphrase: \"passphrase2\" },\n],\ncertificate: [fs.readFileSync(\"./client_cert1.pem\"), fs.readFileSync(\"./client_cert2.pem\")],\n},\n});\n// \u5e26\u5bc6\u7801\u77ed\u8bed\u7684\u5355\u4e2a\u52a0\u5bc6PFX\nawait got(\"https://example.com\", {\nhttps: {\npfx: fs.readFileSync(\"./fake.pfx\"),\npassphrase: \"passphrase\",\n},\n});\n// \u4f7f\u7528\u4e0d\u540c\u5bc6\u7801\u7684\u591a\u4e2a\u52a0\u5bc6PFX\nawait got(\"https://example.com\", {\nhttps: {\npfx: [\n{\nbuffer: fs.readFileSync(\"./key1.pfx\"),\npassphrase: \"passphrase1\",\n},\n{\nbuffer: fs.readFileSync(\"./key2.pfx\"),\npassphrase: \"passphrase2\",\n},\n],\n},\n});\n// \u591a\u4e2a\u52a0\u5bc6PFX\u7684\u5355\u4e00\u5bc6\u7801\u77ed\u8bed\nawait got(\"https://example.com\", {\nhttps: {\npassphrase: \"passphrase\",\npfx: [\n{\nbuffer: fs.readFileSync(\"./key1.pfx\"),\n},\n{\nbuffer: fs.readFileSync(\"./key2.pfx\"),\n},\n],\n},\n});\n</code></pre>"},{"location":"6-timeout/","title":"\u8d85\u65f6\u9009\u9879","text":"<p>\u6e90\u7801: <code>source/core/timed-out.ts</code></p> <p>It is a good practice to set a timeout to prevent hanging requests. By default, there is no timeout set.</p> <p>All numbers refer to milliseconds.</p> <pre><code>import got from \"got\";\nconst { timings } = await got(\"https://example.com\", {\ntimeout: {\nlookup: 100,\nconnect: 50,\nsecureConnect: 50,\nsocket: 1000,\nsend: 10000,\nresponse: 1000,\n},\n});\n// Alternatively:\nconst { timings } = await got(\"https://example.com\", {\ntimeout: {\nrequest: 10000,\n},\n});\nconsole.log(timings);\n// {\n//  start: 1625474926602,\n//  socket: 1625474926605,\n//  lookup: 1625474926610,\n//  connect: 1625474926617,\n//  secureConnect: 1625474926631,\n//  upload: 1625474926631,\n//  response: 1625474926638,\n//  end: 1625474926642,\n//  error: undefined,\n//  abort: undefined,\n//  phases: {\n//      wait: 3,\n//      dns: 5,\n//      tcp: 7,\n//      tls: 14,\n//      request: 0,\n//      firstByte: 7,\n//      download: 4,\n//      total: 40\n//  }\n// }\n</code></pre>"},{"location":"6-timeout/#timeout","title":"<code>timeout</code>","text":"<p>\u7c7b\u578b: <code>object</code></p> <p>This object describes the maximum allowed time for particular events.</p>"},{"location":"6-timeout/#lookup","title":"<code>lookup</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>Starts when a socket is assigned. Ends when the hostname has been resolved.</p> <p>Does not apply when using a Unix domain socket. Does not apply when passing an IP address.</p> <p>It is preferred to not use any greater value than <code>100</code>.</p>"},{"location":"6-timeout/#connect","title":"<code>connect</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>Starts when lookup completes. Ends when the socket is fully connected.</p> <p>If <code>lookup</code> does not apply to the request, this event starts when the socket is assigned and ends when the socket is connected.</p>"},{"location":"6-timeout/#secureconnect","title":"<code>secureConnect</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>Starts when <code>connect</code> completes. Ends when the handshake process completes.</p> <p>This timeout applies only to HTTPS requests.</p>"},{"location":"6-timeout/#socket","title":"<code>socket</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>Starts when the socket is connected. Resets when new data is transferred.</p> <p>It is the same as <code>request.setTimeout(timeout)</code> which calls <code>socket.setTimeout(timeout)</code> after a socket is assigned to this request and is connected.</p>"},{"location":"6-timeout/#send","title":"<code>send</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>Starts when the socket is connected. Ends when all data have been written to the socket.</p> <p>Note:</p> <ul> <li>This does not assure the data have been received by the other end!</li> <li>It only assures that the data have been passed to the underlying OS.</li> </ul>"},{"location":"6-timeout/#response","title":"<code>response</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>Starts when request has been flushed. Ends when the headers are received.</p>"},{"location":"6-timeout/#read","title":"<code>read</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>Starts when the headers are received. Ends when the response's <code>end</code> event fires.</p> <p>Note:</p> <ul> <li>This timeout is blocked by https://github.com/nodejs/node/issues/35923</li> </ul>"},{"location":"6-timeout/#request","title":"<code>request</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>Starts when the request is initiated. Ends when the response's <code>end</code> event fires.</p> <p>In other words, this is the global timeout.</p>"},{"location":"7-retry/","title":"\u91cd\u8bd5 API","text":"<p>Note</p> <p>\u5982\u679c\u4f60\u6b63\u5728\u5bfb\u627e\u4f7f\u7528\u6d41\u7684\u91cd\u8bd5\u5b9e\u73b0\uff0c\u8bf7\u67e5\u770b\u91cd\u8bd5\u6d41API\u3002</p> <p>Tip</p> <p>\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u94a9\u5b50\u4e2d\u629b\u51fa <code>RetryError</code>\u6765\u89e6\u53d1\u91cd\u8bd5\u3002</p> <p>Tip</p> <p><code>afterResponse</code>\u94a9\u5b50\u516c\u5f00\u4e86\u4e00\u4e2a\u4e13\u7528\u51fd\u6570\uff0c\u7528\u4e8e\u4f7f\u7528\u5408\u5e76\u9009\u9879\u8fdb\u884c\u91cd\u8bd5\u3002  \u4e86\u89e3\u66f4\u591a.</p>"},{"location":"7-retry/#retry","title":"<code>retry</code>","text":"<p>\u7c7b\u578b: <code>object</code> Default:</p> <pre><code>{\nlimit: 2,\nmethods: [\n'GET',\n'PUT',\n'HEAD',\n'DELETE',\n'OPTIONS',\n'TRACE'\n],\nstatusCodes: [\n408,\n413,\n429,\n500,\n502,\n503,\n504,\n521,\n522,\n524\n],\nerrorCodes: [\n'ETIMEDOUT',\n'ECONNRESET',\n'EADDRINUSE',\n'ECONNREFUSED',\n'EPIPE',\n'ENOTFOUND',\n'ENETUNREACH',\n'EAI_AGAIN'\n],\nmaxRetryAfter: undefined,\ncalculateDelay: ({computedValue}) =&gt; computedValue,\nbackoffLimit: Number.POSITIVE_INFINITY,\nnoise: 100\n}\n</code></pre> <p>This option represents the <code>retry</code> object.</p>"},{"location":"7-retry/#limit","title":"<code>limit</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>The maximum retry count.</p>"},{"location":"7-retry/#methods","title":"<code>methods</code>","text":"<p>\u7c7b\u578b: <code>string[]</code></p> <p>The allowed methods to retry on.</p> <p>Note</p> <p>By default, Got does not retry on <code>POST</code>.</p>"},{"location":"7-retry/#statuscodes","title":"<code>statusCodes</code>","text":"<p>\u7c7b\u578b: <code>number[]</code></p> <p>Note</p> <p>Only unsuccessful requests are retried. In order to retry successful requests, use an <code>afterResponse</code> hook.</p> <p>The allowed HTTP status codes to retry on.</p>"},{"location":"7-retry/#errorcodes","title":"<code>errorCodes</code>","text":"<p>\u7c7b\u578b: <code>string[]</code></p> <p>The allowed error codes to retry on.</p> <ul> <li><code>ETIMEDOUT</code> - One of the timeout limits was reached.</li> <li><code>ECONNRESET</code>- The connection was forcibly closed.</li> <li><code>EADDRINUSE</code>- Could not bind to any free port.</li> <li><code>ECONNREFUSED</code>- The connection was refused by the server.</li> <li><code>EPIPE</code> - The remote side of the stream being written has been closed.</li> <li><code>ENOTFOUND</code> - Could not resolve the hostname to an IP address.</li> <li><code>ENETUNREACH</code> - No internet connection.</li> <li><code>EAI_AGAIN</code> - DNS lookup timed out.</li> </ul>"},{"location":"7-retry/#maxretryafter","title":"<code>maxRetryAfter</code>","text":"<p>\u7c7b\u578b: <code>number | undefined</code> \u9ed8\u8ba4: <code>options.timeout.request</code></p> <p>The upper limit of <code>retry-after</code> header. If <code>undefined</code>, it will use <code>options.timeout</code> as the value.</p> <p>If the limit is exceeded, the request is canceled.</p>"},{"location":"7-retry/#calculatedelay","title":"<code>calculateDelay</code>","text":"<p>\u7c7b\u578b: <code>Function</code></p> <pre><code>(retryObject: RetryObject) =&gt; Promisable&lt;number&gt;;\n</code></pre> <pre><code>interface RetryObject {\nattemptCount: number;\nretryOptions: RetryOptions;\nerror: RequestError;\ncomputedValue: number;\nretryAfter?: number;\n}\n</code></pre> <p>The function used to calculate the delay before the next request is made. Returning <code>0</code> cancels the retry.</p> <p>Note</p> <p>This function is responsible for the entire retry mechanism, including the <code>limit</code> property. To support this, you need to check if <code>computedValue</code> is different than <code>0</code>.</p> <p>Tip</p> <p>This is especially useful when you want to scale down the computed value.</p> <pre><code>import got from \"got\";\nawait got(\"https://httpbin.org/anything\", {\nretry: {\ncalculateDelay: ({ computedValue }) =&gt; {\nreturn computedValue / 10;\n},\n},\n});\n</code></pre>"},{"location":"7-retry/#backofflimit","title":"<code>backoffLimit</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>The upper limit of the <code>computedValue</code>.</p> <p>By default, the <code>computedValue</code> is calculated in the following way:</p> <pre><code>2 ** (attemptCount - 1) * 1000 + noise;\n</code></pre> <p>The delay increases exponentially. In order to prevent this, you can set this value to a fixed value, such as <code>1000</code>.</p>"},{"location":"7-retry/#noise","title":"<code>noise</code>","text":"<p>\u7c7b\u578b: <code>number</code></p> <p>The maximum acceptable retry noise in the range of <code>-100</code> to <code>+100</code>.</p>"},{"location":"8-errors/","title":"\u9519\u8bef","text":"<p>Source code:</p> <ul> <li><code>source/core/errors.ts</code></li> <li><code>source/as-promise/types.ts</code></li> <li><code>source/core/response.ts</code></li> </ul> <p>All Got errors contain various metadata, such as:</p> <ul> <li><code>code</code> - A string like <code>ERR_NON_2XX_3XX_RESPONSE</code>,</li> <li><code>options</code> - An instance of <code>Options</code>,</li> <li><code>request</code> - An instance of Got Stream,</li> <li><code>response</code> (optional) - An instance of Got Response,</li> <li><code>timings</code> (optional) - Points to <code>response.timings</code>.</li> </ul>"},{"location":"8-errors/#capturing-async-stack-traces","title":"Capturing async stack traces","text":"<p>Read the article here.</p> <p>Note:</p> <ul> <li>The error codes may differ when the root error has a <code>code</code> property set.</li> </ul>"},{"location":"8-errors/#requesterror","title":"<code>RequestError</code>","text":"<p>Code: <code>ERR_GOT_REQUEST_ERROR</code></p> <p>When a request fails. Contains a <code>code</code> property with error class code, like <code>ECONNREFUSED</code>. All the errors below inherit this one.</p>"},{"location":"8-errors/#cacheerror","title":"<code>CacheError</code>","text":"<p>Code: <code>ERR_CACHE_ACCESS</code></p> <p>When a cache method fails, for example, if the database goes down or there's a filesystem error.</p>"},{"location":"8-errors/#readerror","title":"<code>ReadError</code>","text":"<p>Code: <code>ERR_READING_RESPONSE_STREAM</code></p> <p>When reading from response stream fails.</p>"},{"location":"8-errors/#parseerror","title":"<code>ParseError</code>","text":"<p>Code: <code>ERR_BODY_PARSE_FAILURE</code></p> <p>When server response code is 2xx, and parsing body fails. Includes a <code>response</code> property.</p>"},{"location":"8-errors/#uploaderror","title":"<code>UploadError</code>","text":"<p>Code: <code>ERR_UPLOAD</code></p> <p>When the request body is a stream and an error occurs while reading from that stream.</p>"},{"location":"8-errors/#httperror","title":"<code>HTTPError</code>","text":"<p>Code: <code>ERR_NON_2XX_3XX_RESPONSE</code></p> <p>When the request is unsuccessful.</p> <p>A request is successful when the status code of the final request is <code>2xx</code> or <code>3xx</code>.</p> <p>When following redirects, a request is successful only when the status code of the final request is <code>2xx</code>.</p> <p>Note:</p> <ul> <li><code>304</code> responses are always considered successful.</li> </ul>"},{"location":"8-errors/#maxredirectserror","title":"<code>MaxRedirectsError</code>","text":"<p>Code: <code>ERR_TOO_MANY_REDIRECTS</code></p> <p>When the server redirects you more than ten times. Includes a <code>response</code> property.</p>"},{"location":"8-errors/#unsupportedprotocolerror","title":"<code>UnsupportedProtocolError</code>","text":"<p>Note:</p> <ul> <li>This error is not public.</li> </ul> <p>Code: <code>ERR_UNSUPPORTED_PROTOCOL</code></p> <p>When given an unsupported protocol.</p>"},{"location":"8-errors/#timeouterror","title":"<code>TimeoutError</code>","text":"<p>Code: <code>ETIMEDOUT</code></p> <p>When the request is aborted due to a timeout. Includes an <code>event</code> (a string) property along with <code>timings</code>.</p>"},{"location":"8-errors/#cancelerror","title":"<code>CancelError</code>","text":"<p>Code: <code>ERR_CANCELED</code></p> <p>When the request is aborted with <code>promise.cancel()</code>.</p>"},{"location":"8-errors/#retryerror","title":"<code>RetryError</code>","text":"<p>Code: <code>ERR_RETRYING</code></p> <p>Always triggers a new retry when thrown.</p>"},{"location":"8-errors/#aborterror","title":"<code>AbortError</code>","text":"<p>Code: <code>ERR_ABORTED</code></p> <p>When the request is aborted with AbortController.abort().</p>"},{"location":"9-hooks/","title":"\u94a9\u5b50 API","text":""},{"location":"9-hooks/#hooks","title":"<code>hooks</code>","text":"<p>\u7c7b\u578b: <code>object&lt;string, Function[]&gt;</code></p> <p>This option represents the hooks to run. Thrown errors will be automatically converted to <code>RequestError</code>.</p>"},{"location":"9-hooks/#init","title":"<code>init</code>","text":"<p>\u7c7b\u578b: <code>InitHook[]</code> \u9ed8\u8ba4: <code>[]</code></p> <pre><code>(plainRequestOptions: OptionsInit, options: Options) =&gt; void\n</code></pre> <p>Called with the plain request options, right before their normalization. The second argument represents the current <code>Options</code> instance.</p> <p>Note:</p> <ul> <li>This hook must be synchronous.</li> </ul> <p>Note:</p> <ul> <li>This is called every time options are merged.</li> </ul> <p>Note:</p> <ul> <li>The <code>options</code> object may not have the <code>url</code> property. To modify it, use a <code>beforeRequest</code> hook instead.</li> </ul> <p>Note:</p> <ul> <li>This hook is called when a new instance of <code>Options</code> is created.</li> <li>Do not confuse this with the creation of <code>Request</code> or <code>got(\u2026)</code>.</li> </ul> <p>Note:</p> <ul> <li>When using <code>got(url)</code> or <code>got(url, undefined, defaults)</code> this hook will not be called.</li> </ul> <p>This is especially useful in conjunction with <code>got.extend()</code> when the input needs custom handling.</p> <p>For example, this can be used to fix typos to migrate from older versions faster.</p> <pre><code>import got from \"got\";\nconst instance = got.extend({\nhooks: {\ninit: [\n(plain) =&gt; {\nif (\"followRedirects\" in plain) {\nplain.followRedirect = plain.followRedirects;\ndelete plain.followRedirects;\n}\n},\n],\n},\n});\n// Normally, the following would throw:\nconst response = await instance(\"https://example.com\", {\nfollowRedirects: true,\n});\n// There is no option named `followRedirects`, but we correct it in an `init` hook.\n</code></pre> <p>Or you can create your own option and store it in a context:</p> <pre><code>import got from \"got\";\nconst instance = got.extend({\nhooks: {\ninit: [\n(plain, options) =&gt; {\nif (\"secret\" in plain) {\noptions.context.secret = plain.secret;\ndelete plain.secret;\n}\n},\n],\nbeforeRequest: [\n(options) =&gt; {\noptions.headers.secret = options.context.secret;\n},\n],\n},\n});\nconst { headers } = await instance(\"https://httpbin.org/anything\", {\nsecret: \"passphrase\",\n}).json();\nconsole.log(headers.Secret);\n//=&gt; 'passphrase'\n</code></pre>"},{"location":"9-hooks/#beforerequest","title":"<code>beforeRequest</code>","text":"<p>\u7c7b\u578b: <code>BeforeRequestHook[]</code> \u9ed8\u8ba4: <code>[]</code></p> <pre><code>(options: Options) =&gt; Promisable&lt;void | Response | ResponseLike&gt;;\n</code></pre> <p>Called right before making the request with <code>options.createNativeRequestOptions()</code>. This hook is especially useful in conjunction with <code>got.extend()</code> when you want to sign your request.</p> <p>Note:</p> <ul> <li>Got will make no further changes to the request before it is sent.</li> </ul> <p>Note:</p> <ul> <li>Changing <code>options.json</code> or <code>options.form</code> has no effect on the request. You should change <code>options.body</code> instead. If needed, update the <code>options.headers</code> accordingly.</li> </ul> <pre><code>import got from \"got\";\nconst response = await got.post(\"https://httpbin.org/anything\", {\njson: { payload: \"old\" },\nhooks: {\nbeforeRequest: [\n(options) =&gt; {\noptions.body = JSON.stringify({ payload: \"new\" });\noptions.headers[\"content-length\"] = options.body.length.toString();\n},\n],\n},\n});\n</code></pre> <p>Tip:</p> <ul> <li>You can indirectly override the <code>request</code> function by early returning a <code>ClientRequest</code>-like instance or a <code>IncomingMessage</code>-like instance. This is very useful when creating a custom cache mechanism.</li> <li>Read more about this tip.</li> </ul>"},{"location":"9-hooks/#beforeredirect","title":"<code>beforeRedirect</code>","text":"<p>\u7c7b\u578b: <code>BeforeRedirectHook[]</code> \u9ed8\u8ba4: <code>[]</code></p> <pre><code>(updatedOptions: Options, plainResponse: PlainResponse) =&gt; Promisable&lt;void&gt;;\n</code></pre> <p>The equivalent of <code>beforeRequest</code> but when redirecting.</p> <p>Tip:</p> <ul> <li>This is especially useful when you want to avoid dead sites.</li> </ul> <pre><code>import got from \"got\";\nconst response = await got(\"https://example.com\", {\nhooks: {\nbeforeRedirect: [\n(options, response) =&gt; {\nif (options.hostname === \"deadSite\") {\noptions.hostname = \"fallbackSite\";\n}\n},\n],\n},\n});\n</code></pre>"},{"location":"9-hooks/#beforeretry","title":"<code>beforeRetry</code>","text":"<p>\u7c7b\u578b: <code>BeforeRetryHook[]</code> \u9ed8\u8ba4: <code>[]</code></p> <pre><code>(error: RequestError, retryCount: number) =&gt; Promisable&lt;void&gt;;\n</code></pre> <p>The equivalent of <code>beforeError</code> but when retrying. Additionally, there is a second argument <code>retryCount</code>, the current retry number.</p> <p>Note:</p> <ul> <li>When using the Stream API, this hook is ignored.</li> </ul> <p>Note:</p> <ul> <li>When retrying, the <code>beforeRequest</code> hook is called afterwards.</li> </ul> <p>Note:</p> <ul> <li>If no retry occurs, the <code>beforeError</code> hook is called instead.</li> </ul> <p>This hook is especially useful when you want to retrieve the cause of a retry.</p> <pre><code>import got from \"got\";\nawait got(\"https://httpbin.org/status/500\", {\nhooks: {\nbeforeRetry: [\n(error, retryCount) =&gt; {\nconsole.log(`Retrying [${retryCount}]: ${error.code}`);\n// Retrying [1]: ERR_NON_2XX_3XX_RESPONSE\n},\n],\n},\n});\n</code></pre>"},{"location":"9-hooks/#afterresponse","title":"<code>afterResponse</code>","text":"<p>\u7c7b\u578b: <code>AfterResponseHook[]</code> \u9ed8\u8ba4: <code>[]</code></p> <pre><code>(response: Response, retryWithMergedOptions: (options: OptionsInit) =&gt; never) =&gt;\nPromisable&lt;Response | CancelableRequest&lt;Response&gt;&gt;;\n</code></pre> <p>Each function should return the response. This is especially useful when you want to refresh an access token.</p> <p>Note:</p> <ul> <li>When using the Stream API, this hook is ignored.</li> </ul> <p>Note:</p> <ul> <li>Calling the <code>retryWithMergedOptions</code> function will trigger <code>beforeRetry</code> hooks. If the retry is successful, all remaining <code>afterResponse</code> hooks will be called. In case of an error, <code>beforeRetry</code> hooks will be called instead.   Meanwhile the <code>init</code>, <code>beforeRequest</code> , <code>beforeRedirect</code> as well as already executed <code>afterResponse</code> hooks will be skipped.</li> </ul> <pre><code>import got from \"got\";\nconst instance = got.extend({\nhooks: {\nafterResponse: [\n(response, retryWithMergedOptions) =&gt; {\n// Unauthorized\nif (response.statusCode === 401) {\n// Refresh the access token\nconst updatedOptions = {\nheaders: {\ntoken: getNewToken(),\n},\n};\n// Update the defaults\ninstance.defaults.options.merge(updatedOptions);\n// Make a new retry\nreturn retryWithMergedOptions(updatedOptions);\n}\n// No changes otherwise\nreturn response;\n},\n],\nbeforeRetry: [\n(error) =&gt; {\n// This will be called on `retryWithMergedOptions(...)`\n},\n],\n},\nmutableDefaults: true,\n});\n</code></pre>"},{"location":"9-hooks/#beforeerror","title":"<code>beforeError</code>","text":"<p>\u7c7b\u578b: <code>BeforeErrorHook[]</code> \u9ed8\u8ba4: <code>[]</code></p> <pre><code>(error: RequestError) =&gt; Promisable&lt;RequestError&gt;;\n</code></pre> <p>Called with a <code>RequestError</code> instance. The error is passed to the hook right before it's thrown.</p> <p>This is especially useful when you want to have more detailed errors.</p> <pre><code>import got from \"got\";\nawait got(\"https://api.github.com/repos/sindresorhus/got/commits\", {\nresponseType: \"json\",\nhooks: {\nbeforeError: [\n(error) =&gt; {\nconst { response } = error;\nif (response &amp;&amp; response.body) {\nerror.name = \"GitHubError\";\nerror.message = `${response.body.message} (${response.statusCode})`;\n}\nreturn error;\n},\n],\n},\n});\n</code></pre>"},{"location":"async-stack-traces/","title":"\u6355\u83b7\u5f02\u6b65\u5806\u6808\u8ddf\u8e2a","text":"<p>Caution:</p> <ul> <li>\u6355\u83b7\u5f02\u6b65\u5806\u6808\u8ddf\u8e2a\u4f1a\u4e25\u91cd\u964d\u4f4e\u6027\u80fd!</li> </ul> <p>\u60f3\u8df3\u8fc7\u8fd9\u7bc7\u6587\u7ae0?\u8bf7\u53c2\u9605Conclusion\uff0c\u6211\u4eec\u5728\u5176\u4e2d\u8ba8\u8bba\u4e86\u4e00\u4e2a\u666e\u901a\u7684\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u6211\u4eec\u751f\u6d3b\u5728\u4e00\u4e2a\u5145\u6ee1\u866b\u5b50\u7684\u4e16\u754c\u3002 \u8f6f\u4ef6\u53d8\u5f97\u8d8a\u6765\u8d8a\u590d\u6742\uff0c\u8fd9\u4f7f\u5f97\u8c03\u8bd5\u53d8\u5f97\u8d8a\u6765\u8d8a\u56f0\u96be\u3002 \u4f60\u662f\u5426\u66fe\u7ecf\u72af\u8fc7\u9519\u8bef\uff0c\u5374\u4e0d\u77e5\u9053\u9519\u8bef\u6765\u81ea\u54ea\u91cc?\u662f\u7684\uff0c\u901a\u5e38\u4e0d\u5bb9\u6613\u627e\u5230\u3002</p> <p>\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\uff0c\u9519\u8bef\u7684<code>.stack</code>\u6709\u65f6\u770b\u8d77\u6765\u4e0d\u5b8c\u6574\u3002 \u8fd9\u901a\u5e38\u662f\u7531\u4e8e\u8ba1\u65f6\u5668\u89e6\u53d1\u7684\u5f02\u6b65\u51fd\u6570\u7684\u6267\u884c\u3002 \u793a\u4f8b\u5982\u4e0b:</p> <pre><code>await new Promise((resolve, reject) =&gt; {\nsetTimeout(() =&gt; {\nreject(new Error(\"here\"));\n});\n});\n</code></pre> <pre><code>file:///home/szm/Desktop/got/demo.js:3\nreject(new Error('here'));\n^\nError: here\nat Timeout._onTimeout (file:///home/szm/Desktop/got/demo.js:3:10)\nat listOnTimeout (node:internal/timers:557:17)\nat processTimers (node:internal/timers:500:7)\n</code></pre> <p>The stack trace does not show where the timeout was set. It's currently not possible to determine this with the native <code>Promise</code>s. However, <code>bluebird</code> exposes an option dedicated to capturing async stack traces:</p> <pre><code>import Bluebird from \"bluebird\";\nBluebird.config({ longStackTraces: true });\nglobal.Promise = Bluebird;\nawait new Promise((resolve, reject) =&gt; {\nsetTimeout(() =&gt; {\nreject(new Error(\"here\"));\n});\n});\n</code></pre> <pre><code>node:internal/process/esm_loader:74\n    internalBinding('errors').triggerUncaughtException(\n                              ^\n\nError: here\n    at Timeout._onTimeout (file:///home/szm/Desktop/got/demo.js:7:10)\n    at listOnTimeout (node:internal/timers:557:17)\n    at processTimers (node:internal/timers:500:7)\nFrom previous event:\n    at file:///home/szm/Desktop/got/demo.js:5:7\n    at ModuleJob.run (node:internal/modules/esm/module_job:183:25)\n    at async Loader.import (node:internal/modules/esm/loader:178:24)\n    at async Object.loadESM (node:internal/process/esm_loader:68:5)\n    at async handleMainPromise (node:internal/modules/run_main:63:12)\n</code></pre> <p>Now it's clear. We know that the timeout was set on line 5. Bluebird should be sufficient for Got:</p> <pre><code>import Bluebird from \"bluebird\";\nimport got from \"got\";\nBluebird.config({ longStackTraces: true });\nglobal.Promise = Bluebird;\ntry {\nawait got(\"https://httpbin.org/delay/1\", {\ntimeout: {\nrequest: 1,\n},\nretry: {\nlimit: 0,\n},\n});\n} catch (error) {\nconsole.error(error.stack);\n}\n</code></pre> <pre><code>TimeoutError: Timeout awaiting 'request' for 1ms\n    at ClientRequest.&lt;anonymous&gt; (file:///home/szm/Desktop/got/dist/source/core/index.js:780:61)\n    at Object.onceWrapper (node:events:514:26)\n    at ClientRequest.emit (node:events:406:35)\n    at TLSSocket.socketErrorListener (node:_http_client:447:9)\n    at TLSSocket.emit (node:events:394:28)\n    at emitErrorNT (node:internal/streams/destroy:157:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:122:3)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)\n    at Timeout.timeoutHandler [as _onTimeout] (file:///home/szm/Desktop/got/dist/source/core/timed-out.js:42:25)\n    at listOnTimeout (node:internal/timers:559:11)\n    at processTimers (node:internal/timers:500:7)\nFrom previous event:\n    at new PCancelable (file:///home/szm/Desktop/got/node_modules/p-cancelable/index.js:31:19)\n    at asPromise (file:///home/szm/Desktop/got/dist/source/as-promise/index.js:21:21)\n    at lastHandler (file:///home/szm/Desktop/got/dist/source/create.js:42:27)\n    at iterateHandlers (file:///home/szm/Desktop/got/dist/source/create.js:49:28)\n    at got (file:///home/szm/Desktop/got/dist/source/create.js:69:16)\n    at file:///home/szm/Desktop/got/demo.js:8:8\n    at ModuleJob.run (node:internal/modules/esm/module_job:183:25)\n    at async Loader.import (node:internal/modules/esm/loader:178:24)\n    at async Object.loadESM (node:internal/process/esm_loader:68:5)\n    at async handleMainPromise (node:internal/modules/run_main:63:12)\n</code></pre> <p>As expected, we know where the timeout has been set. Unfortunately, if we increase our retry count limit to <code>1</code>, the stack trace remains the same. That's because <code>bluebird</code> doesn't track I/O events. Please note that this should be sufficient for most cases. In order to debug further, we can use <code>async_hooks</code> instead. A Stack Overflow user has come up with an awesome solution:</p> <pre><code>import asyncHooks from \"async_hooks\";\nconst traces = new Map();\nasyncHooks\n.createHook({\ninit(id) {\nconst trace = {};\nError.captureStackTrace(trace);\ntraces.set(id, trace.stack.replace(/(^.+$\\n){4}/m, \"\\n\"));\n},\ndestroy(id) {\ntraces.delete(id);\n},\n})\n.enable();\nglobalThis.Error = class extends Error {\nconstructor(message) {\nsuper(message);\nthis.constructor.captureStackTrace(this, this.constructor);\n}\nstatic captureStackTrace(what, where) {\nsuper.captureStackTrace.call(Error, what, where);\nconst trace = traces.get(asyncHooks.executionAsyncId());\nif (trace) {\nwhat.stack += trace;\n}\n}\n};\n</code></pre> <p>If we replace the <code>bluebird</code> part with this, we get:</p> <pre><code>Error: Timeout awaiting 'request' for 1ms\n    at ClientRequest.&lt;anonymous&gt; (file:///home/szm/Desktop/got/dist/source/core/index.js:780:61)\n    at Object.onceWrapper (node:events:514:26)\n    at ClientRequest.emit (node:events:406:35)\n    at TLSSocket.socketErrorListener (node:_http_client:447:9)\n    at TLSSocket.emit (node:events:394:28)\n    at emitErrorNT (node:internal/streams/destroy:157:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:122:3)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)\n    at emitInitScript (node:internal/async_hooks:493:3)\n    at process.nextTick (node:internal/process/task_queues:133:5)\n    at onDestroy (node:internal/streams/destroy:96:15)\n    at TLSSocket.Socket._destroy (node:net:677:5)\n    at _destroy (node:internal/streams/destroy:102:25)\n    at TLSSocket.destroy (node:internal/streams/destroy:64:5)\n    at ClientRequest.destroy (node:_http_client:371:16)\n    at emitInitScript (node:internal/async_hooks:493:3)\n    at initAsyncResource (node:internal/timers:162:5)\n    at new Timeout (node:internal/timers:196:3)\n    at setTimeout (node:timers:164:19)\n    at addTimeout (file:///home/szm/Desktop/got/dist/source/core/timed-out.js:32:25)\n    at timedOut (file:///home/szm/Desktop/got/dist/source/core/timed-out.js:59:31)\n    at Request._onRequest (file:///home/szm/Desktop/got/dist/source/core/index.js:771:32)\n    at emitInitScript (node:internal/async_hooks:493:3)\n    at promiseInitHook (node:internal/async_hooks:323:3)\n    at promiseInitHookWithDestroyTracking (node:internal/async_hooks:327:3)\n    at Request.flush (file:///home/szm/Desktop/got/dist/source/core/index.js:274:24)\n    at makeRequest (file:///home/szm/Desktop/got/dist/source/as-promise/index.js:125:30)\n    at Request.&lt;anonymous&gt; (file:///home/szm/Desktop/got/dist/source/as-promise/index.js:121:17)\n    at Object.onceWrapper (node:events:514:26)\n    at emitInitScript (node:internal/async_hooks:493:3)\n    at promiseInitHook (node:internal/async_hooks:323:3)\n    at promiseInitHookWithDestroyTracking (node:internal/async_hooks:327:3)\n    at file:///home/szm/Desktop/got/dist/source/core/index.js:357:27\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at emitInitScript (node:internal/async_hooks:493:3)\n    at promiseInitHook (node:internal/async_hooks:323:3)\n    at promiseInitHookWithDestroyTracking (node:internal/async_hooks:327:3)\n    at file:///home/szm/Desktop/got/dist/source/core/index.js:338:50\n    at Request._beforeError (file:///home/szm/Desktop/got/dist/source/core/index.js:388:11)\n    at ClientRequest.&lt;anonymous&gt; (file:///home/szm/Desktop/got/dist/source/core/index.js:781:18)\n    at Object.onceWrapper (node:events:514:26)\n    at emitInitScript (node:internal/async_hooks:493:3)\n    at process.nextTick (node:internal/process/task_queues:133:5)\n    at onDestroy (node:internal/streams/destroy:96:15)\n    at TLSSocket.Socket._destroy (node:net:677:5)\n    at _destroy (node:internal/streams/destroy:102:25)\n    at TLSSocket.destroy (node:internal/streams/destroy:64:5)\n    at ClientRequest.destroy (node:_http_client:371:16)\n    at emitInitScript (node:internal/async_hooks:493:3)\n    at initAsyncResource (node:internal/timers:162:5)\n    at new Timeout (node:internal/timers:196:3)\n    at setTimeout (node:timers:164:19)\n    at addTimeout (file:///home/szm/Desktop/got/dist/source/core/timed-out.js:32:25)\n    at timedOut (file:///home/szm/Desktop/got/dist/source/core/timed-out.js:59:31)\n    at Request._onRequest (file:///home/szm/Desktop/got/dist/source/core/index.js:771:32)\n    at emitInitScript (node:internal/async_hooks:493:3)\n    at promiseInitHook (node:internal/async_hooks:323:3)\n    at promiseInitHookWithDestroyTracking (node:internal/async_hooks:327:3)\n    at Request.flush (file:///home/szm/Desktop/got/dist/source/core/index.js:274:24)\n    at lastHandler (file:///home/szm/Desktop/got/dist/source/create.js:37:26)\n    at iterateHandlers (file:///home/szm/Desktop/got/dist/source/create.js:49:28)\n    at got (file:///home/szm/Desktop/got/dist/source/create.js:69:16)\n    at Timeout.timeoutHandler [as _onTimeout] (file:///home/szm/Desktop/got/dist/source/core/timed-out.js:42:25)\n    at listOnTimeout (node:internal/timers:559:11)\n    at processTimers (node:internal/timers:500:7)\n</code></pre> <p>This is extremely long, and not a complete Node.js app. Just a demo. Imagine how long it would be if this was used with databases, file systems, etc.</p>"},{"location":"async-stack-traces/#conclusion","title":"Conclusion","text":"<p>All these workarounds have a large impact on performance. However, there is a possible solution to this madness. Got provides handlers, hooks, and context. We can capture the stack trace in a handler, store it in a context and expose it in a <code>beforeError</code> hook.</p> <pre><code>import got from \"got\";\nconst instance = got.extend({\nhandlers: [\n(options, next) =&gt; {\nError.captureStackTrace(options.context);\nreturn next(options);\n},\n],\nhooks: {\nbeforeError: [\n(error) =&gt; {\nerror.source = error.options.context.stack.split(\"\\n\");\nreturn error;\n},\n],\n},\n});\ntry {\nawait instance(\"https://httpbin.org/delay/1\", {\ntimeout: {\nrequest: 100,\n},\nretry: {\nlimit: 0,\n},\n});\n} catch (error) {\nconsole.error(error);\n}\n</code></pre> <pre><code>RequestError: Timeout awaiting 'request' for 100ms\n    at ClientRequest.&lt;anonymous&gt; (file:///home/szm/Desktop/got/dist/source/core/index.js:780:61)\n    at Object.onceWrapper (node:events:514:26)\n    at ClientRequest.emit (node:events:406:35)\n    at TLSSocket.socketErrorListener (node:_http_client:447:9)\n    at TLSSocket.emit (node:events:394:28)\n    at emitErrorNT (node:internal/streams/destroy:157:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:122:3)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)\n    at Timeout.timeoutHandler [as _onTimeout] (file:///home/szm/Desktop/got/dist/source/core/timed-out.js:42:25)\n    at listOnTimeout (node:internal/timers:559:11)\n    at processTimers (node:internal/timers:500:7) {\n  input: undefined,\n  code: 'ETIMEDOUT',\n  timings: { &lt;too long to include&gt; },\n  name: 'TimeoutError',\n  options: { &lt;too long to include&gt; },\n  event: 'request',\n  source: [\n    'Error',\n    '    at got.extend.handlers (file:///home/szm/Desktop/got/demo.js:6:10)',\n    '    at iterateHandlers (file:///home/szm/Desktop/got/dist/source/create.js:49:28)',\n    '    at got (file:///home/szm/Desktop/got/dist/source/create.js:69:16)',\n    '    at file:///home/szm/Desktop/got/demo.js:23:8',\n    '    at ModuleJob.run (node:internal/modules/esm/module_job:183:25)',\n    '    at async Loader.import (node:internal/modules/esm/loader:178:24)',\n    '    at async Object.loadESM (node:internal/process/esm_loader:68:5)',\n    '    at async handleMainPromise (node:internal/modules/run_main:63:12)'\n  ]\n}\n</code></pre> <p>Yay! This is much more readable. Furthermore, we capture the stack trace only when <code>got</code> is called. This is definitely going to have some performance impact, but it will be much more performant than the other mentioned solutions.</p> <p>Curious to know more? Check out these links:</p> <ul> <li>https://stackoverflow.com/questions/54914770/is-there-a-good-way-to-surface-error-traces-in-production-across-event-emitters</li> <li>https://github.com/nodejs/node/issues/11370</li> <li>https://github.com/puppeteer/puppeteer/issues/2037</li> <li>https://github.com/nodejs/node/pull/13870</li> </ul>"},{"location":"cache/","title":"\u7f13\u5b58","text":"<p>Got\u5b9e\u73b0\u4e86RFC 7234\u517c\u5bb9\u7684HTTP\u7f13\u5b58\uff0c\u5b83\u53ef\u4ee5\u5728\u5185\u5b58\u4e2d\u5f00\u7bb1\u5373\u7528\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u63d2\u5165\u5404\u79cd\u5b58\u50a8\u9002\u914d\u5668\u3002 \u65b0\u7684\u7f13\u5b58\u6761\u76ee\u76f4\u63a5\u4ece\u7f13\u5b58\u4e2d\u63d0\u4f9b\uff0c\u8fc7\u65f6\u7684\u7f13\u5b58\u6761\u76ee\u4f7f\u7528<code>If-None-Match</code> / <code>If-Modified-Since</code> \u5934\u91cd\u65b0\u9a8c\u8bc1\u3002 \u4f60\u53ef\u4ee5\u5728<code>cacheable-request</code> \u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5e95\u5c42\u7f13\u5b58\u884c\u4e3a\u7684\u4fe1\u606f\u3002</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528JavaScript\u7684<code>Map</code>\u7c7b\u578b\u4f5c\u4e3a\u5185\u5b58\u7f13\u5b58:</p> <pre><code>import got from \"got\";\nconst map = new Map();\nlet response = await got(\"https://sindresorhus.com\", { cache: map });\nconsole.log(response.isFromCache);\n//=&gt; false\nresponse = await got(\"https://sindresorhus.com\", { cache: map });\nconsole.log(response.isFromCache);\n//=&gt; true\n</code></pre> <p>Got\u5728\u5185\u90e8\u4f7f\u7528Keyv\u6765\u652f\u6301\u5404\u79cd\u5b58\u50a8\u9002\u914d\u5668\u3002 \u5bf9\u4e8e\u66f4\u53ef\u4f38\u7f29\u7684\u4e1c\u897f\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b98\u65b9Keyv\u5b58\u50a8\u9002\u914d\u5668:)</p> <pre><code>$ npm install @keyv/redis\n</code></pre> <pre><code>import got from \"got\";\nimport KeyvRedis from \"@keyv/redis\";\nconst redis = new KeyvRedis(\"redis://user:pass@localhost:6379\");\nawait got(\"https://sindresorhus.com\", { cache: redis });\n</code></pre> <p>Got\u652f\u6301\u4efb\u4f55\u9075\u5faaMap API\u7684\u4e1c\u897f\uff0c\u56e0\u6b64\u7f16\u5199\u81ea\u5df1\u7684\u5b58\u50a8\u9002\u914d\u5668\u6216\u4f7f\u7528\u7b2c\u4e09\u65b9\u89e3\u51b3\u65b9\u6848\u90fd\u5f88\u5bb9\u6613\u3002</p> <p>\u4f8b\u5982\uff0c\u4ee5\u4e0b\u90fd\u662f\u6709\u6548\u7684\u5b58\u50a8\u9002\u914d\u5668:</p> <pre><code>const storageAdapter = new Map();\nawait got(\"https://sindresorhus.com\", { cache: storageAdapter });\n</code></pre> <pre><code>import storageAdapter from \"./my-storage-adapter\";\nawait got(\"https://sindresorhus.com\", { cache: storageAdapter });\n</code></pre> <pre><code>import QuickLRU from \"quick-lru\";\nconst storageAdapter = new QuickLRU({ maxSize: 1000 });\nawait got(\"https://sindresorhus.com\", { cache: storageAdapter });\n</code></pre> <p>View the Keyv docs for more information on how to use storage adapters.</p>"},{"location":"cache/#_2","title":"\u9ad8\u7ea7\u7f13\u5b58\u673a\u5236","text":"<p><code>request</code> \u51fd\u6570\u53ef\u80fd\u8fd4\u56de\u4e00\u4e2a<code>IncomingMessage</code>\u7c7b\u7684\u5b9e\u4f8b\u3002</p> <pre><code>import https from \"node:https\";\nimport { Readable } from \"node:stream\";\nimport got from \"got\";\nconst getCachedResponse = (url, options) =&gt; {\nconst response = new Readable({\nread() {\nthis.push(\"Hello, world!\");\nthis.push(null);\n},\n});\nresponse.statusCode = 200;\nresponse.headers = {};\nresponse.trailers = {};\nresponse.socket = null;\nresponse.aborted = false;\nresponse.complete = true;\nresponse.httpVersion = \"1.1\";\nresponse.httpVersionMinor = 1;\nresponse.httpVersionMajor = 1;\nreturn response;\n};\nconst instance = got.extend({\nrequest: (url, options, callback) =&gt; {\nreturn getCachedResponse(url, options);\n},\n});\nconst body = await instance(\"https://example.com\").text();\nconsole.log(body);\n//=&gt; \"Hello, world!\"\n</code></pre> <p>If you don't want to alter the <code>request</code> function, you can return a cached response in a <code>beforeRequest</code> hook:</p> <pre><code>import https from \"node:https\";\nimport { Readable } from \"node:stream\";\nimport got from \"got\";\nconst getCachedResponse = (url, options) =&gt; {\nconst response = new Readable({\nread() {\nthis.push(\"Hello, world!\");\nthis.push(null);\n},\n});\nresponse.statusCode = 200;\nresponse.headers = {};\nresponse.trailers = {};\nresponse.socket = null;\nresponse.aborted = false;\nresponse.complete = true;\nresponse.httpVersion = \"1.1\";\nresponse.httpVersionMinor = 1;\nresponse.httpVersionMajor = 1;\nreturn response;\n};\nconst instance = got.extend({\nhooks: {\nbeforeRequest: [\n(options) =&gt; {\nreturn getCachedResponse(options.url, options);\n},\n],\n},\n});\nconst body = await instance(\"https://example.com\").text();\nconsole.log(body);\n//=&gt; \"Hello, world!\"\n</code></pre> <p>If you want to prevent duplicating the same requests, you can use a handler instead.</p> <pre><code>import got from \"got\";\nconst map = new Map();\nconst instance = got.extend({\nhandlers: [\n(options, next) =&gt; {\nif (options.isStream) {\nreturn next(options);\n}\nconst pending = map.get(options.url.href);\nif (pending) {\nreturn pending;\n}\nconst promise = next(options);\nmap.set(options.url.href, promise);\npromise.finally(() =&gt; {\nmap.delete(options.url.href);\n});\nreturn promise;\n},\n],\n});\nconst [first, second] = await Promise.all([\ninstance(\"https://httpbin.org/anything\"),\ninstance(\"https://httpbin.org/anything\"),\n]);\nconsole.log(first === second);\n//=&gt; true\n</code></pre>"},{"location":"lets-make-a-plugin/","title":"\u63d2\u4ef6","text":"<p>\u53e6\u4e00\u4e2a\u5173\u4e8e\u5982\u4f55\u50cf\u8001\u677f\u4e00\u6837\u4f7f\u7528 Got \u7684\u4f8b\u5b50 </p> <p>\u597d\u4e86\uff0c\u4f60\u4eec\u5df2\u7ecf\u5b66\u4e86\u4e00\u4e9b\u57fa\u7840\u77e5\u8bc6\u3002\u592a\u597d\u4e86!</p> <p>\u5f53\u6d89\u53ca\u5230\u9ad8\u7ea7\u7528\u6cd5\u65f6\uff0c\u81ea\u5b9a\u4e49\u5b9e\u4f8b\u975e\u5e38\u6709\u7528\u3002 \u4f8b\u5982\uff0c\u770b\u770b<code>gh-got</code>\u3002 \u770b\u8d77\u6765\u5f88\u590d\u6742\uff0c\u4f46\u662f\u2026\u2026\u8fd9\u5f88\u7b80\u5355\uff0c\u800c\u4e14\u975e\u5e38\u6709\u7528\u3002</p> <p>\u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230GitHub API \u6587\u6863\u3002</p> <p>\u8ba9\u6211\u4eec\u5199\u4e0b\u6700\u91cd\u8981\u7684\u4fe1\u606f:</p> <ol> <li>The root endpoint is <code>https://api.github.com/</code>.</li> <li>We will use version 3 of the API. The <code>Accept</code> header needs to be set to <code>application/vnd.github.v3+json</code>.</li> <li>The body is in a JSON format.</li> <li>We will use OAuth2 for authorization.</li> <li>We may receive <code>400 Bad Request</code> or <code>422 Unprocessable Entity</code>. The body contains detailed information about the error.</li> <li>Pagination? Yeah! Supported natively by Got.</li> <li> <p>Rate limiting. These headers are interesting:</p> </li> <li> <p><code>X-RateLimit-Limit</code></p> </li> <li><code>X-RateLimit-Remaining</code></li> <li> <p><code>X-RateLimit-Reset</code></p> <p>Also <code>X-GitHub-Request-Id</code> may be useful for debugging.</p> </li> <li> <p>The <code>User-Agent</code> header is required.</p> </li> </ol> <p>\u5f53\u6211\u4eec\u6709\u4e86\u6240\u6709\u5fc5\u8981\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u6405\u62cc </p>"},{"location":"lets-make-a-plugin/#_2","title":"\u6839\u7aef\u70b9","text":"<p>\u8fd9\u91cc\u6ca1\u4ec0\u4e48\u53ef\u505a\u7684\u3002\u53ea\u9700\u8981\u6269\u5c55\u4e00\u4e2a\u5b9e\u4f8b\u5e76\u63d0\u4f9b<code>prefixUrl</code>\u9009\u9879:</p> <pre><code>import got from \"got\";\nconst instance = got.extend({\nprefixUrl: \"https://api.github.com\",\n});\nexport default instance;\n</code></pre>"},{"location":"lets-make-a-plugin/#v3-api","title":"v3 API","text":"<p>GitHub \u9700\u8981\u77e5\u9053\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u54ea\u4e2a API \u7248\u672c\u3002\u6211\u4eec\u5c06\u4f7f\u7528<code>Accept</code>\u5934\u6587\u4ef6:</p> <pre><code>import got from \"got\";\nconst instance = got.extend({\nprefixUrl: \"https://api.github.com\",\nheaders: {\naccept: \"application/vnd.github.v3+json\",\n},\n});\nexport default instance;\n</code></pre>"},{"location":"lets-make-a-plugin/#json-body","title":"JSON body","text":"<p>\u6211\u4eec\u4f1a\u7528\u5230\u5b83<code>options.responseType</code>:</p> <pre><code>import got from \"got\";\nconst instance = got.extend({\nprefixUrl: \"https://api.github.com\",\nheaders: {\naccept: \"application/vnd.github.v3+json\",\n},\nresponseType: \"json\",\n});\nexport default instance;\n</code></pre>"},{"location":"lets-make-a-plugin/#_3","title":"\u6388\u6743","text":"<p>\u901a\u5e38\u4f1a\u8bbe\u7f6e\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\uff0c\u4f8b\u5982<code>GITHUB_TOKEN</code>\u3002 \u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4fee\u6539\u6240\u6709\u5e94\u7528\u4e2d\u7684\u4ee4\u724c\uff0c\u5bf9\u5427?\u9177\u3002\u662f\u4ec0\u4e48\u2026\u2026 \u6211\u4eec\u60f3\u4e3a\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u4e2a\u552f\u4e00\u7684\u4ee4\u724c\u3002\u7136\u540e\u6211\u4eec\u5c06\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u9009\u9879-\u5b83\u5c06\u9ed8\u8ba4\u4e3a\u73af\u5883\u53d8\u91cf\uff0c\u4f46\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8986\u76d6\u5b83\u3002</p> <p>Got \u6267\u884c\u9009\u9879\u9a8c\u8bc1\uff0c\u4e0d\u77e5\u9053<code>token</code>\u662f\u4e00\u4e2a\u9700\u8981\u7684\u9009\u9879\uff0c\u6240\u4ee5\u5b83\u4f1a\u629b\u51fa\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u4e2a<code>init</code>\u94a9\u5b50\u4e2d\u5904\u7406\u5b83\uff0c\u5e76\u5c06\u5b83\u4fdd\u5b58\u5728<code>options.context</code>\u4e2d\u3002</p> <pre><code>import got from \"got\";\nconst instance = got.extend({\nprefixUrl: \"https://api.github.com\",\nheaders: {\naccept: \"application/vnd.github.v3+json\",\n},\nresponseType: \"json\",\ncontext: {\ntoken: process.env.GITHUB_TOKEN,\n},\nhooks: {\ninit: [\n(raw, options) =&gt; {\nif (\"token\" in raw) {\noptions.context.token = raw.token;\ndelete raw.token;\n}\n},\n],\n},\n});\nexport default instance;\n</code></pre> <p>\u5bf9\u4e8e\u5176\u4f59\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5904\u7406\u7a0b\u5e8f\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u94a9\u5b50\uff0c\u4f46\u8fd9\u6837\u4f1a\u66f4\u6613\u4e8e\u9605\u8bfb\u3002 \u5728\u51e0\u884c\u4ee3\u7801\u4e2d\u4f7f\u7528<code>beforeerequest</code>\uff0c <code>beforeError</code>\u548c<code>afterResponse</code>\u94a9\u5b50\u4f1a\u4f7f\u4e8b\u60c5\u4e0d\u5fc5\u8981\u5730\u590d\u6742\u5316\u3002</p> <p>Tip</p> <ul> <li>\u5f53\u4f60\u7684\u63d2\u4ef6\u53d8\u5f97\u590d\u6742\u65f6\uff0c\u4f7f\u7528\u94a9\u5b50\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5b9e\u8df5\u3002</li> <li>\u5c3d\u91cf\u4e0d\u8981\u91cd\u8f7d\u5904\u7406\u7a0b\u5e8f\u51fd\u6570\uff0c\u4f46\u4e5f\u4e0d\u8981\u6ee5\u7528\u94a9\u5b50\u3002</li> </ul> <pre><code>import got from \"got\";\nconst instance = got.extend({\nprefixUrl: \"https://api.github.com\",\nheaders: {\naccept: \"application/vnd.github.v3+json\",\n},\nresponseType: \"json\",\ncontext: {\ntoken: process.env.GITHUB_TOKEN,\n},\nhooks: {\ninit: [\n(raw, options) =&gt; {\nif (\"token\" in raw) {\noptions.context.token = raw.token;\ndelete raw.token;\n}\n},\n],\n},\nhandlers: [\n(options, next) =&gt; {\n// Authorization\nconst { token } = options.context;\nif (token &amp;&amp; !options.headers.authorization) {\noptions.headers.authorization = `token ${token}`;\n}\nreturn next(options);\n},\n],\n});\nexport default instance;\n</code></pre>"},{"location":"lets-make-a-plugin/#_4","title":"\u9519\u8bef","text":"<p>\u6211\u4eec\u5e94\u8be5\u4e3a\u9519\u8bef\u547d\u540d\uff0c\u4ee5\u4fbf\u77e5\u9053\u9519\u8bef\u662f\u5426\u6765\u81ea API \u54cd\u5e94\u3002\u8d85\u7ea7\u9519\u8bef\uff0c\u6211\u4eec\u6765\u4e86!</p> <pre><code>...\nhandlers: [\n(options, next) =&gt; {\n// Authorization\nconst {token} = options.context;\nif (token &amp;&amp; !options.headers.authorization) {\noptions.headers.authorization = `token ${token}`;\n}\n// Don't touch streams\nif (options.isStream) {\nreturn next(options);\n}\n// Magic begins\nreturn (async () =&gt; {\ntry {\nconst response = await next(options);\nreturn response;\n} catch (error) {\nconst {response} = error;\n// Nicer errors\nif (response &amp;&amp; response.body) {\nerror.name = 'GitHubError';\nerror.message = `${response.body.message} (${response.statusCode} status code)`;\n}\nthrow error;\n}\n})();\n}\n]\n...\n</code></pre> <p>Note that by providing our own errors in handlers, we don't alter the ones in <code>beforeError</code> hooks.\\ The conversion is the last thing here.</p>"},{"location":"lets-make-a-plugin/#_5","title":"\u901f\u5ea6\u9650\u5236","text":"<p>Umm... <code>response.headers['x-ratelimit-remaining']</code> doesn't look good. What about <code>response.rateLimit.limit</code> instead?\\ Yeah, definitely. Since <code>response.headers</code> is an object, we can easily parse these:</p> <pre><code>const getRateLimit = (headers) =&gt; ({\nlimit: Number.parseInt(headers[\"x-ratelimit-limit\"], 10),\nremaining: Number.parseInt(headers[\"x-ratelimit-remaining\"], 10),\nreset: new Date(Number.parseInt(headers[\"x-ratelimit-reset\"], 10) * 1000),\n});\ngetRateLimit({\n\"x-ratelimit-limit\": \"60\",\n\"x-ratelimit-remaining\": \"55\",\n\"x-ratelimit-reset\": \"1562852139\",\n});\n// =&gt; {\n//  limit: 60,\n//  remaining: 55,\n//  reset: 2019-07-11T13:35:39.000Z\n// }\n</code></pre> <p>Let's integrate it:</p> <pre><code>const getRateLimit = (headers) =&gt; ({\nlimit: Number.parseInt(headers['x-ratelimit-limit'], 10),\nremaining: Number.parseInt(headers['x-ratelimit-remaining'], 10),\nreset: new Date(Number.parseInt(headers['x-ratelimit-reset'], 10) * 1000)\n});\n...\nhandlers: [\n(options, next) =&gt; {\n// Authorization\nconst {token} = options.context;\nif (token &amp;&amp; !options.headers.authorization) {\noptions.headers.authorization = `token ${token}`;\n}\n// Don't touch streams\nif (options.isStream) {\nreturn next(options);\n}\n// Magic begins\nreturn (async () =&gt; {\ntry {\nconst response = await next(options);\n// Rate limit for the Response object\nresponse.rateLimit = getRateLimit(response.headers);\nreturn response;\n} catch (error) {\nconst {response} = error;\n// Nicer errors\nif (response &amp;&amp; response.body) {\nerror.name = 'GitHubError';\nerror.message = `${response.body.message} (${response.statusCode} status code)`;\n}\n// Rate limit for errors\nif (response) {\nerror.rateLimit = getRateLimit(response.headers);\n}\nthrow error;\n}\n})();\n}\n]\n...\n</code></pre>"},{"location":"lets-make-a-plugin/#user-agent","title":"\u86cb\u7cd5\u4e0a\u7684\u7cd6\u971c: <code>User-Agent</code>\u5934\u3002","text":"<pre><code>const packageJson = {\nname: 'gh-got',\nversion: '12.0.0'\n};\nconst instance = got.extend({\n...\nheaders: {\naccept: 'application/vnd.github.v3+json',\n'user-agent': `${packageJson.name}/${packageJson.version}`\n},\n...\n});\n</code></pre>"},{"location":"lets-make-a-plugin/#_6","title":"\u54c7\u3002\u5c31\u662f\u8fd9\u6837\u5417\uff1f","text":"<p>Yup. View the full source code here. Here's an example of how to use it:</p> <pre><code>import ghGot from \"gh-got\";\nconst response = await ghGot(\"users/sindresorhus\");\nconst creationDate = new Date(response.created_at);\nconsole.log(\n`Sindre's GitHub profile was created on ${creationDate.toGMTString()}`\n);\n// =&gt; Sindre's GitHub profile was created on Sun, 20 Dec 2009 22:57:02 GMT\n</code></pre>"},{"location":"lets-make-a-plugin/#_7","title":"\u5206\u9875","text":"<pre><code>import ghGot from \"gh-got\";\nconst countLimit = 50;\nconst pagination = ghGot.paginate(\"repos/sindresorhus/got/commits\", {\npagination: { countLimit },\n});\nconsole.log(`Printing latest ${countLimit} Got commits (newest to oldest):`);\nfor await (const commitData of pagination) {\nconsole.log(commitData.commit.message);\n}\n</code></pre> <p>\u8fd9\u662f\u2026\u2026\u60ca\u4eba\u7684!\u6211\u4eec\u4e0d\u5fc5\u81ea\u5df1\u5b9e\u73b0\u5206\u9875\u3002\u4e00\u5207\u90fd\u641e\u5b9a\u4e86\u3002</p>"},{"location":"lets-make-a-plugin/#_8","title":"\u5728\u6700\u540e","text":"<p>\u60a8\u77e5\u9053\u53ef\u4ee5\u5c06\u8bb8\u591a\u5b9e\u4f8b\u6df7\u5408\u5230\u4e00\u4e2a\u66f4\u5927\u3001\u66f4\u5f3a\u5927\u7684\u5b9e\u4f8b\u4e2d\u5417?\u67e5\u770b\u9ad8\u7ea7\u521b\u4f5c\u6307\u5357\u3002</p>"},{"location":"quick-start/","title":"\u5feb\u901f\u5165\u95e8","text":""},{"location":"quick-start/#_2","title":"\u83b7\u5f97\u548c\u53d1\u5e03\u6570\u636e","text":"<p>\u6700\u7b80\u5355\u7684<code>GET</code>\u8bf7\u6c42:</p> <pre><code>import got from \"got\";\nconst url = \"https://httpbin.org/anything\";\nconst response = await got(url);\n</code></pre> <p>\u8c03\u7528\u8fd4\u56de<code>Promise&lt;Response&gt;</code>\u3002 \u5982\u679c\u4e3b\u4f53\u5305\u542b JSON\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u68c0\u7d22:</p> <pre><code>import got from \"got\";\nconst url = \"https://httpbin.org/anything\";\nconst data = await got(url).json();\n</code></pre> <p>\u7c7b\u4f3c\u7684<code>got.text</code>\u65b9\u6cd5\u8fd4\u56de\u7eaf\u6587\u672c\u3002</p> <p>\u6240\u6709<code>got</code>\u65b9\u6cd5\u90fd\u63a5\u53d7\u4e00\u4e2a options \u5bf9\u8c61\u6765\u4f20\u9012\u989d\u5916\u7684\u914d\u7f6e\uff0c\u6bd4\u5982\u5934\u4fe1\u606f:</p> <pre><code>import got from \"got\";\nconst url = \"https://httpbin.org/anything\";\nconst options = {\nheaders: {\n\"Custom-Header\": \"Quick start\",\n},\ntimeout: {\nsend: 3500,\n},\n};\nconst data = await got(url, options).json();\n</code></pre> <p>\u4e00\u4e2a <code>POST</code> \u8bf7\u6c42\u975e\u5e38\u7c7b\u4f3c:</p> <pre><code>import got from \"got\";\nconst url = \"https://httpbin.org/anything\";\nconst options = {\njson: {\ndocumentName: \"Quick Start\",\n},\n};\nconst data = await got.post(url, options);\n</code></pre> <p>\u8bf7\u6c42\u4f53\u5728 options \u5bf9\u8c61\u4e2d\u4f20\u9012\u3002 <code>json</code>\u5c5e\u6027\u5c06\u81ea\u52a8\u76f8\u5e94\u5730\u8bbe\u7f6e\u6807\u9898\u3002 \u53ef\u4ee5\u50cf\u4e0a\u9762\u4e00\u6837\u6dfb\u52a0\u81ea\u5b9a\u4e49\u6807\u5934\u3002</p>"},{"location":"quick-start/#_3","title":"\u4f7f\u7528\u6d41","text":"<p>Stream API\u5141\u8bb8\u5229\u7528Node.js Streams\u529f\u80fd:</p> <pre><code>import fs from \"node:fs\";\nimport { pipeline } from \"node:stream/promises\";\nimport got from \"got\";\nconst url = \"https://httpbin.org/anything\";\nconst options = {\njson: {\ndocumentName: \"Quick Start\",\n},\n};\nconst gotStream = got.stream.post(url, options);\nconst outStream = fs.createWriteStream(\"anything.json\");\ntry {\nawait pipeline(gotStream, outStream);\n} catch (error) {\nconsole.error(error);\n}\n</code></pre>"},{"location":"quick-start/#_4","title":"\u9009\u9879","text":"<p>\u9009\u9879\u53ef\u4ee5\u5728\u5ba2\u6237\u7aef\u7ea7\u522b\u8bbe\u7f6e\uff0c\u5e76\u5728\u540e\u7eed\u67e5\u8be2\u4e2d\u91cd\u7528:</p> <pre><code>import got from \"got\";\nconst options = {\nprefixUrl: \"https://httpbin.org\",\nheaders: {\nAuthorization: getTokenFromVault(),\n},\n};\nconst client = got.extend(options);\nexport default client;\n</code></pre> <p>\u4e00\u4e9b\u5e38\u89c1\u7684\u9009\u9879\u662f:</p> <ul> <li><code>searchParams</code>: \u67e5\u8be2\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002</li> <li><code>prefixUrl</code>: \u524d\u7f6e\u67e5\u8be2\u8def\u5f84\u3002\u8def\u5f84\u5fc5\u987b\u76f8\u5bf9\u4e8e\u524d\u7f00\uff0c\u5373\u4e0d\u80fd\u4ee5<code>/</code>\u5f00\u5934\u3002</li> <li><code>method</code>: HTTP \u65b9\u6cd5\u540d\u3002</li> <li><code>headers</code>: \u67e5\u8be2\u5934\u3002</li> <li><code>json</code>: JSON body.</li> <li><code>form</code>: \u4e00\u4e2a\u8868\u5355\u67e5\u8be2\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002</li> </ul> <p>\u6709\u5173\u5176\u4ed6\u9009\u9879\uff0c\u8bf7\u53c2\u9605\u6587\u6863.</p>"},{"location":"quick-start/#_5","title":"\u9519\u8bef","text":"<p>Promise \u548c Stream api \u90fd\u4f7f\u7528\u5143\u6570\u636e\u629b\u51fa\u9519\u8bef\u3002</p> <pre><code>import got from \"got\";\ntry {\nconst data = await got.get(\"https://httpbin.org/status/404\");\n} catch (error) {\nconsole.error(error.response.statusCode);\n}\n</code></pre> <pre><code>import got from \"got\";\nconst stream = got.stream\n.get(\"https://httpbin.org/status/404\")\n.once(\"error\", (error) =&gt; {\nconsole.error(error.response.statusCode);\n});\n</code></pre>"},{"location":"quick-start/#_6","title":"\u6742\u9879","text":"<p>HTTP \u65b9\u6cd5\u540d\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u9009\u9879\u7ed9\u51fa\uff0c\u5f53\u5b83\u53ea\u5728\u8fd0\u884c\u65f6\u624d\u77e5\u9053\u65f6\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f88\u65b9\u4fbf:</p> <pre><code>import got from \"got\";\nconst url = \"https://httpbin.org/anything\";\nconst method = \"POST\";\nconst options = {\nmethod,\njson: {\ndocumentName: \"Quick Start\",\n},\n};\nconst data = await got(url, options);\n</code></pre> <p>\u5bf9\u4e8e\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\uff0cHTTP \u5ba2\u6237\u7aef\u53ea\u505a<code>GET</code>\u548c<code>POST</code>\u67e5\u8be2(<code>PUT</code>\uff0c<code>PATCH</code>\u6216<code>DELETE</code>\u65b9\u6cd5\u5de5\u4f5c\u7c7b\u4f3c)\u3002 \u4e0b\u9762\u7684\u90e8\u5206\u5c06\u63d0\u4f9b\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u7528\u6cd5\u3002</p>"},{"location":"quick-start/#_7","title":"\u8d85\u65f6","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8bf7\u6c42\u6ca1\u6709\u8d85\u65f6\u3002\u4e00\u4e2a\u597d\u7684\u505a\u6cd5\u662f\u8bbe\u7f6e\u4e00\u4e2a:</p> <pre><code>import got from \"got\";\nconst options = {\ntimeout: {\nrequest: 10000,\n},\n};\nconst client = got.extend(options);\nexport default client;\n</code></pre> <p>\u4e0a\u9762\u4e3a\u5bfc\u51fa\u7684<code>client</code>\u53d1\u51fa\u7684\u6240\u6709\u8bf7\u6c42\u8bbe\u7f6e\u4e86 10000 \u6beb\u79d2\u7684\u5168\u5c40\u8d85\u65f6\u3002 \u4e0e\u6240\u6709\u9009\u9879\u4e00\u6837\uff0c\u8d85\u65f6\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u5728\u8bf7\u6c42\u7ea7\u522b\u3002 \u53c2\u89c1<code>timeout</code> \u9009\u9879\u3002</p>"},{"location":"quick-start/#_8","title":"\u91cd\u8bd5","text":"<p>\u5931\u8d25\u7684\u8bf7\u6c42\u5c06\u91cd\u8bd5\u4e24\u6b21\u3002 \u91cd\u8bd5\u7b56\u7565\u53ef\u4ee5\u901a\u8fc7<code>retry</code>\u9009\u9879\u5bf9\u8c61\u8fdb\u884c\u8c03\u4f18\u3002</p> <pre><code>import got from \"got\";\nconst options = {\nretry: {\nlimit: 5,\nerrorCodes: [\"ETIMEDOUT\"],\n},\n};\n</code></pre> <p>stream \u7684\u91cd\u8bd5\u5c31\u6709\u70b9\u68d8\u624b\u4e86<code>stream.on('retry', \u2026)</code>.</p>"},{"location":"quick-start/#_9","title":"\u94a9\u5b50","text":"<p>\u94a9\u5b50\u662f\u5728\u4e00\u4e9b\u8bf7\u6c42\u4e8b\u4ef6\u4e0a\u8c03\u7528\u7684\u81ea\u5b9a\u4e49\u51fd\u6570:</p> <pre><code>import got from \"got\";\nconst logRetry = (error, retryCount) =&gt; {\nconsole.error(`Retrying after error ${error.code}, retry #: ${retryCount}`);\n};\nconst options = {\nhooks: {\nbeforeRetry: [logRetry],\n},\n};\nconst client = got.extend(options);\nexport default client;\n</code></pre> <p>\u6ce8\u610f\uff0c\u94a9\u5b50\u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u7ed9\u51fa, \u56e0\u6b64\u53ef\u4ee5\u7ed9\u51fa\u591a\u4e2a\u94a9\u5b50\u3002\u53c2\u89c1\u6587\u6863\u4e86\u89e3\u5176\u4ed6\u53ef\u80fd\u7684\u94a9\u5b50.</p>"},{"location":"quick-start/#_10","title":"\u8d70\u5f97\u66f4\u8fdc","text":"<p>\u5728\u6587\u6863\u548c\u6280\u5de7\u4e2d\u8fd8\u6709\u5f88\u591a\u9700\u8981\u53d1\u73b0\u7684\u5730\u65b9\u3002 \u5176\u4e2d\uff0c<code>Got</code>\u53ef\u4ee5\u5904\u7406cookies\uff0c \u5206\u9875\uff0c \u7f13\u5b58\u3002 \u5728\u5b9e\u73b0 <code>Got</code>  \u5df2\u7ecf\u5b8c\u6210\u7684\u64cd\u4f5c\u4e4b\u524d\uff0c\u8bf7\u9605\u8bfb\u6587\u6863\u3002</p>"},{"location":"tags/","title":"\u6807\u7b7e","text":""},{"location":"thanksto/","title":"\u7279\u522b\u611f\u8c22","text":"<p> <p>                  Sindre\u7684\u5f00\u6e90\u5de5\u4f5c\u5f97\u5230\u4e86\u793e\u533a\u7684\u652f\u6301\u3002\u7279\u522b\u611f\u8c22:              </p> Strapi\u662f\u9886\u5148\u7684\u5f00\u6e90\u65e0\u5934CMS\u3002 \u5b83\u662f100%\u7684JavaScript\uff0c\u5b8c\u5168\u53ef\u5b9a\u5236\uff0c\u5e76\u4e14\u4ee5\u5f00\u53d1\u4eba\u5458\u4e3a\u5148\u3002 Paperwork that makes the data work.                  \u6587\u4e66\u5de5\u4f5c\u7684\u7b80\u5355api\u3002PDF\u751f\u6210\uff0c\u7535\u5b50\u7b7e\u540d\u548c\u53ef\u5d4c\u5165\u7684\u65e0\u4ee3\u7801web\u8868\u5355\u3002                                  \u5c06\u6587\u4e66\u5de5\u4f5c\u81ea\u52a8\u5316\u6784\u5efa\u5230\u4ea7\u54c1\u4e2d\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u3002                  \u4f7f\u6570\u636e\u5de5\u4f5c\u7684\u6587\u4e66\u5de5\u4f5c\u3002                  \u6587\u4e66\u5de5\u4f5c\u7684\u7b80\u5355api\u3002PDF\u751f\u6210\uff0c\u7535\u5b50\u7b7e\u540d\u548c\u53ef\u5d4c\u5165\u7684\u65e0\u4ee3\u7801web\u8868\u5355\u3002                                  \u5c06\u6587\u4e66\u5de5\u4f5c\u81ea\u52a8\u5316\u6784\u5efa\u5230\u4ea7\u54c1\u4e2d\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u3002                  </p>"},{"location":"tips/","title":"\u6280\u5de7","text":""},{"location":"tips/#_2","title":"\u8d85\u65f6","text":"<p>\u6bcf\u4e2a\u8bf7\u6c42\u53ef\u4ee5\u6709\u4e00\u4e2a\u6700\u5927\u5141\u8bb8\u8fd0\u884c\u65f6\u95f4\u3002 \u4e3a\u4e86\u4f7f\u7528\u6b64\u529f\u80fd\uff0c\u8bf7\u6307\u5b9a<code>request</code>\u8d85\u65f6\u9009\u9879\u3002</p> <pre><code>import got from \"got\";\nconst body = await got(\"https://httpbin.org/anything\", {\ntimeout: {\nrequest: 30000,\n},\n});\n</code></pre> <p>\u6709\u5173\u66f4\u5177\u4f53\u7684\u8d85\u65f6\uff0c\u8bf7\u8bbf\u95ee\u8d85\u65f6 API.</p>"},{"location":"tips/#_3","title":"\u91cd\u8bd5","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u53ef\u80fd\uff0cGot\u4f1a\u5bf9\u5931\u8d25\u7684\u8bf7\u6c42\u8fdb\u884c\u65b0\u7684\u91cd\u8bd5\u3002</p> <p>\u901a\u8fc7\u5c06\u5141\u8bb8\u7684\u6700\u5927\u91cd\u8bd5\u6b21\u6570\u8bbe\u7f6e\u4e3a<code>0</code>\uff0c\u53ef\u4ee5\u5b8c\u5168\u7981\u7528\u6b64\u529f\u80fd\u3002</p> <pre><code>import got from \"got\";\nconst noRetryGot = got.extend({\nretry: {\nlimit: 0,\n},\n});\n</code></pre> <p>\u8981\u6307\u5b9a\u53ef\u68c0\u7d22\u7684\u9519\u8bef\uff0c\u8bf7\u4f7f\u7528\u91cd\u8bd5API.</p>"},{"location":"tips/#cookies","title":"Cookies","text":"<p>Got \u652f\u6301 cookies \u5f00\u7bb1\u5373\u7528\u3002 \u4e0d\u9700\u8981\u624b\u52a8\u89e3\u6790\u5b83\u4eec\u3002 \u4e3a\u4e86\u4f7f\u7528cookie\uff0c\u4ece<code>tough-cookie</code>\u5305\u4e2d\u4f20\u9012\u4e00\u4e2a<code>CookieJar</code>\u5b9e\u4f8b\u3002</p> <pre><code>import got from \"got\";\nimport { CookieJar } from \"tough-cookie\";\nconst cookieJar = new CookieJar();\nawait cookieJar.setCookie(\"foo=bar\", \"https://httpbin.org\");\nawait got(\"https://httpbin.org/anything\", { cookieJar });\n</code></pre>"},{"location":"tips/#aws","title":"AWS","text":"<p>\u5bf9AWS\u670d\u52a1\u7684\u8bf7\u6c42\u9700\u8981\u5bf9\u5176\u6807\u5934\u8fdb\u884c\u7b7e\u540d\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 <code>got4aws</code>\u5305\u6765\u5b8c\u6210\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528\u7b7e\u540d\u8bf7\u6c42\u67e5\u8be2<code>API \u7f51\u5173</code> \u7684\u793a\u4f8b\u3002</p> <pre><code>import got4aws from \"got4aws\";\nconst got = got4aws();\nconst response = await got(\"https://&lt;api-id&gt;.execute-api.&lt;api-region&gt;.amazonaws.com/&lt;stage&gt;/endpoint/path\", {\n// \u2026\n});\n</code></pre>"},{"location":"tips/#_4","title":"\u5206\u9875","text":"<p>\u5728\u5904\u7406\u5927\u578b\u6570\u636e\u96c6\u65f6\uff0c\u4f7f\u7528\u5206\u9875\u662f\u975e\u5e38\u6709\u6548\u7684 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cGot\u4f7f\u7528<code>Link</code> \u5934\u6765\u68c0\u7d22\u4e0b\u4e00\u9875\u3002 \u4f46\u662f\uff0c\u8fd9\u79cd\u884c\u4e3a\u53ef\u4ee5\u81ea\u5b9a\u4e49\uff0c\u53c2\u89c1\u5206\u9875API\u3002</p> <pre><code>const countLimit = 50;\nconst pagination = got.paginate(\"https://api.github.com/repos/sindresorhus/got/commits\", {\npagination: { countLimit },\n});\nconsole.log(`Printing latest ${countLimit} Got commits (newest to oldest):`);\nfor await (const commitData of pagination) {\nconsole.log(commitData.commit.message);\n}\n</code></pre> <p></p>"},{"location":"tips/#unix","title":"UNIX\u57df\u5957\u63a5\u5b57","text":"<p>\u53c2\u8003<code>enableUnixSockets</code> \u9009\u9879.</p>"},{"location":"tips/#_5","title":"\u6d4b\u8bd5","text":"<p>Got\u4f7f\u7528\u672c\u673a<code>http</code>\u6a21\u5757\uff0c\u8be5\u6a21\u5757\u4f9d\u8d56\u4e8e\u672c\u673a<code>net</code>\u6a21\u5757\u3002 \u8fd9\u610f\u5473\u7740\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u6d4b\u8bd5\u65b9\u6cd5:</p> <ol> <li>\u4f7f\u7528\u50cf[<code>nock</code>]\u8fd9\u6837\u7684mock\u5e93(https://github.com/nock/nock),</li> <li>\u521b\u5efa\u670d\u52a1\u5668\u3002</li> </ol> <p>\u7b2c\u4e00\u79cd\u65b9\u6cd5\u5e94\u8be5\u6db5\u76d6\u6240\u6709\u5e38\u89c1\u7684\u7528\u4f8b \u8bf7\u8bb0\u4f4f\uff0c\u5b83\u8986\u76d6\u4e86\u672c\u5730\u7684<code>http</code>\u6a21\u5757\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u7531\u4e8e\u5dee\u5f02\u800c\u51fa\u73b0bug\u3002</p> <p>\u6700\u53ef\u9760\u7684\u65b9\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u5668 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c<code>nock</code> \u53ef\u80fd\u4e0d\u591f\u6216\u7f3a\u4e4f\u529f\u80fd\u3002</p>"},{"location":"tips/#nock","title":"Nock","text":"<p>By default <code>nock</code> mocks only one request.\\ Got will retry on failed requests by default, causing a <code>No match for request ...</code> error.\\ The solution is to either disable retrying (set <code>options.retry.limit</code> to <code>0</code>) or call <code>.persist()</code> on the mocked request.</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>nock</code>\u53ea\u6a21\u62df\u4e00\u4e2a\u8bf7\u6c42\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cGot\u5c06\u5bf9\u5931\u8d25\u7684\u8bf7\u6c42\u8fdb\u884cretry\uff0c\u5bfc\u81f4<code>No match for request ...</code>\u7684\u9519\u8bef\u3002 \u89e3\u51b3\u65b9\u6848\u662f\u7981\u7528\u91cd\u8bd5(\u5c06<code>options.retry.limit</code>\u8bbe\u7f6e\u4e3a<code>0</code>)\u6216\u5728\u6a21\u62df\u8bf7\u6c42\u4e0a\u8c03\u7528<code>.persist()</code>\u3002</p> <pre><code>import got from \"got\";\nimport nock from \"nock\";\nconst scope = nock(\"https://sindresorhus.com\").get(\"/\").reply(500, \"Internal server error\").persist();\ntry {\nawait got(\"https://sindresorhus.com\");\n} catch (error) {\nconsole.log(error.response.body);\n//=&gt; 'Internal server error'\nconsole.log(error.response.retryCount);\n//=&gt; 2\n}\nscope.persist(false);\n</code></pre>"},{"location":"tips/#_6","title":"\u4ee3\u7406","text":"<p>Note</p> <p>\u6d41\u884c\u7684<code>tunnel</code>\u5305\u672a\u7ef4\u62a4\u3002\u4f7f\u7528\u98ce\u9669\u81ea\u8d1f\u3002 <code>proxy-agent</code>\u5bb6\u65cf\u4e0d\u9075\u5faa\u6700\u65b0\u7684Node.js\u7279\u6027\uff0c\u7f3a\u4e4f\u652f\u6301\u3002</p> <p>\u867d\u7136\u6ca1\u6709\u4e00\u4e2a\u5b8c\u7f8e\u7684\u3001\u6ca1\u6709\u9519\u8bef\u7684\u8f6f\u4ef6\u5305\uff0c\u4f46Apify\u89e3\u51b3\u65b9\u6848\u662f\u4e00\u4e2a\u73b0\u4ee3\u7684\u89e3\u51b3\u65b9\u6848 \u67e5\u770b<code>got-scraping/src/agent/h1-proxy-agent.ts</code>\u3002 \u5b83\u5177\u6709\u4e0e<code>hpagent</code>\u76f8\u540c\u7684API\u3002</p> <p><code>hpagent</code> is a modern package as well. In contrast to <code>tunnel</code>, it allows keeping the internal sockets alive to be reused.</p> <pre><code>import got from \"got\";\nimport { HttpsProxyAgent } from \"hpagent\";\nawait got(\"https://sindresorhus.com\", {\nagent: {\nhttps: new HttpsProxyAgent({\nkeepAlive: true,\nkeepAliveMsecs: 1000,\nmaxSockets: 256,\nmaxFreeSockets: 256,\nscheduling: \"lifo\",\nproxy: \"https://localhost:8080\",\n}),\n},\n});\n</code></pre> <p>Alternatively, use <code>global-agent</code> to configure a global proxy for all HTTP/HTTPS traffic in your program.</p> <p>If you're using HTTP/2, the <code>http2-wrapper</code> package provides proxy support out-of-box.\\ Learn more.</p>"},{"location":"tips/#_7","title":"\u5728\u6ca1\u6709\u4ee3\u7406\u7684\u60c5\u51b5\u4e0b\u91cd\u8bd5","text":"<p>\u5982\u679c\u4f7f\u7528\u4ee3\u7406\uff0c\u53ef\u80fd\u4f1a\u9047\u5230\u8fde\u63a5\u95ee\u9898\u3002 \u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\u662f\u5728\u91cd\u8bd5\u65f6\u7981\u7528\u4ee3\u7406\u3002 \u6d41API\u7684\u89e3\u51b3\u65b9\u6848\u662f\u8fd9\u6837\u7684:</p> <pre><code>import https from \"https\";\nimport fs from \"fs\";\nimport got from \"got\";\nclass MyAgent extends https.Agent {\ncreateConnection(port, options, callback) {\nconsole.log(`Connecting with MyAgent`);\nreturn https.Agent.prototype.createConnection.call(this, port, options, callback);\n}\n}\nconst proxy = new MyAgent();\nlet writeStream;\nconst fn = (retryStream) =&gt; {\nconst options = {\nagent: {\nhttps: proxy,\n},\n};\nconst stream = retryStream ?? got.stream(\"https://example.com\", options);\nif (writeStream) {\nwriteStream.destroy();\n}\nwriteStream = fs.createWriteStream(\"example-com.html\");\nstream.pipe(writeStream);\nstream.once(\"retry\", (retryCount, error, createRetryStream) =&gt; {\nfn(\ncreateRetryStream({\nagent: {\nhttp: undefined,\nhttps: undefined,\nhttp2: undefined,\n},\n})\n);\n});\n};\nfn();\n</code></pre>"},{"location":"tips/#h2c","title":"<code>h2c</code>","text":"<p>\u6ca1\u6709\u76f4\u63a5\u7684<code>h2c</code>\u652f\u6301\u3002</p> <p>\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u5728<code>beforeRequest</code>\u94a9\u5b50\u4e2d\u63d0\u4f9b\u4e00\u4e2a<code>h2session</code>\u9009\u9879\u3002 \u53c2\u89c1\u4f8b\u5b50\u3002</p>"},{"location":"tips/#_8","title":"\u5927\u5199\u6807\u5934","text":"<p>Got\u603b\u662f\u5c06\u6807\u5934\u89c4\u8303\u5316\uff0c\u56e0\u6b64\u4f20\u9012<code>Uppercase-Header</code>\u4f1a\u5c06\u5176\u8f6c\u6362\u4e3a<code>uppercase-header</code>\u3002 \u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u5305\u88c5\u4ee3\u7406:</p> <pre><code>class WrappedAgent {\nconstructor(agent) {\nthis.agent = agent;\n}\naddRequest(request, options) {\nreturn this.agent.addRequest(request, options);\n}\nget keepAlive() {\nreturn this.agent.keepAlive;\n}\nget maxSockets() {\nreturn this.agent.maxSockets;\n}\nget options() {\nreturn this.agent.options;\n}\nget defaultPort() {\nreturn this.agent.defaultPort;\n}\nget protocol() {\nreturn this.agent.protocol;\n}\n}\nclass TransformHeadersAgent extends WrappedAgent {\naddRequest(request, options) {\nconst headers = request.getHeaderNames();\nfor (const header of headers) {\nrequest.setHeader(this.transformHeader(header), request.getHeader(header));\n}\nreturn super.addRequest(request, options);\n}\ntransformHeader(header) {\nreturn header\n.split(\"-\")\n.map((part) =&gt; {\nreturn part[0].toUpperCase() + part.slice(1);\n})\n.join(\"-\");\n}\n}\nconst agent = new http.Agent({\nkeepAlive: true,\n});\nconst wrappedAgent = new TransformHeadersAgent(agent);\n</code></pre> <p>\u53c2\u770b\u4f8b\u5b50.</p>"},{"location":"tips/#_9","title":"\u81ea\u5b9a\u4e49\u9009\u9879","text":"<p>\u5f53\u4e00\u4e2a\u9009\u9879\u4e0d\u5b58\u5728\u65f6 Got v12 \u629b\u51fa\u3002\u56e0\u6b64\u4f20\u9012\u4e00\u4e2a\u9876\u7ea7\u9009\u9879\uff0c\u5982:</p> <pre><code>import got from \"got\";\nawait got(\"https://example.com\", {\nfoo: \"bar\",\n});\n</code></pre> <p>\u5c06\u629b\u51fa\u3002\u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f60\u9700\u8981\u5728<code>init</code>\u94a9\u5b50\u4e2d\u8bfb\u53d6\u8be5\u9009\u9879:</p> <pre><code>import got from \"got\";\nconst convertFoo = got.extend({\nhooks: {\ninit: [\n(rawOptions, options) =&gt; {\nif (\"foo\" in rawOptions) {\noptions.context.foo = rawOptions.foo;\ndelete rawOptions.foo;\n}\n},\n],\n},\n});\nconst instance = got.extend(convertFoo, {\nhooks: {\nbeforeRequest: [\n(options) =&gt; {\noptions.headers.foo = options.context.foo;\n},\n],\n},\n});\nconst { headers } = await instance(\"https://httpbin.org/anything\", { foo: \"bar\" }).json();\nconsole.log(headers.Foo); //=&gt; 'bar'\n</code></pre> <p>\u6700\u540e\uff0c\u60a8\u53ef\u80fd\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u6355\u83b7\u6240\u6709\u5b9e\u4f8b:</p> <pre><code>import got from \"got\";\nconst catchAllOptions = got.extend({\nhooks: {\ninit: [\n(raw, options) =&gt; {\nfor (const key in raw) {\nif (!(key in options)) {\noptions.context[key] = raw[key];\ndelete raw[key];\n}\n}\n},\n],\n},\n});\nconst instance = got.extend(catchAllOptions, {\nhooks: {\nbeforeRequest: [\n(options) =&gt; {\n// All custom options will be visible under `options.context`\noptions.headers.foo = options.context.foo;\n},\n],\n},\n});\nconst { headers } = await instance(\"https://httpbin.org/anything\", { foo: \"bar\" }).json();\nconsole.log(headers.Foo); //=&gt; 'bar'\n</code></pre> <p>Note</p> <p>\u5728<code>init</code>\u94a9\u5b50\u4e2d\u6267\u884c\u9a8c\u8bc1\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u505a\u6cd5\u3002 \u5f53\u9009\u9879\u672a\u77e5\u65f6\uff0c\u53ef\u4ee5\u5b89\u5168\u5730\u629b\u51fa! \u5728\u5185\u90e8\uff0cGot\u4f7f\u7528 <code>@sindresorhus/is</code> \u5305\u3002</p>"},{"location":"tips/#electron-net","title":"\u4e0d\u652f\u6301Electron  <code>net</code> \u6a21\u5757","text":"<p>Note</p> <p>\u5f97\u5230\u4e86v12\u548c\u66f4\u9ad8\u7248\u672c\u7684ESM\u5305\uff0c\u4f46\u662fElectron\u8fd8\u4e0d\u652f\u6301ESM\u3002\u6240\u4ee5\u4f60\u9700\u8981\u4f7f\u7528Got v11\u3002</p> <p>Got doesn't support the <code>electron.net</code> module. It's missing crucial APIs that are available in Node.js.\\ While Got used to support <code>electron.net</code>, it got very unstable and caused many errors.</p> <p>However, you can use IPC communication to get the Response object:</p> <pre><code>// Main process\nconst got = require(\"got\");\nconst instance = got.extend({\n// ...\n});\nipcMain.handle(\"got\", async (event, ...args) =&gt; {\nconst { statusCode, headers, body } = await instance(...args);\nreturn { statusCode, headers, body };\n});\n// Renderer process\nasync () =&gt; {\nconst { statusCode, headers, body } = await ipcRenderer.invoke(\"got\", \"https://httpbin.org/anything\");\n// ...\n};\n</code></pre>"},{"location":"typescript/","title":"TypeScript","text":"<p>Got \u662f\u5b8c\u5168\u7528 TypeScript \u7f16\u5199\u7684\uff0c\u6240\u4ee5\u96c6\u6210\u662f\u65e0\u7f1d\u7684 \u6b64\u5916\uff0c\u7c7b\u578b\u4f7f Got \u907f\u514d\u4e86\u8bb8\u591a\u9519\u8bef\u548c\u4e0d\u4e00\u81f4\u3002</p> <p>\u4e0b\u9762\u662f Got \u5bfc\u51fa\u7684\u7c7b\u578b\u5217\u8868:</p> <p>Note</p> <p>\u8fd9\u4e2a\u5217\u8868\u53ef\u80fd\u4e0d\u5b8c\u6574\u3002\u5982\u679c\u4f60\u53d1\u73b0\u4e00\u4e2a\u7c7b\u578b\u662f\u7f3a\u5931\u7684\uff0c\u8bf7\u6253\u5f00\u4e00\u4e2a\u5173\u4e8e\u5b83\u7684\u95ee\u9898\u3002</p>"},{"location":"typescript/#got","title":"<code>Got</code>","text":""},{"location":"typescript/#gotstream","title":"<code>GotStream</code>","text":""},{"location":"typescript/#gotrequestfunction","title":"<code>GotRequestFunction</code>","text":""},{"location":"typescript/#gotpaginate","title":"<code>GotPaginate</code>","text":""},{"location":"typescript/#optionswithpaginationt-unknown-r-unknown","title":"<code>OptionsWithPagination&lt;T = unknown, R = unknown&gt;</code>","text":""},{"location":"typescript/#optionsoftextresponsebody","title":"<code>OptionsOfTextResponseBody</code>","text":""},{"location":"typescript/#optionsofjsonresponsebody","title":"<code>OptionsOfJSONResponseBody</code>","text":""},{"location":"typescript/#optionsofbufferresponsebody","title":"<code>OptionsOfBufferResponseBody</code>","text":""},{"location":"typescript/#optionsofunknownresponsebody","title":"<code>OptionsOfUnknownResponseBody</code>","text":""},{"location":"typescript/#strictoptions","title":"<code>StrictOptions</code>","text":""},{"location":"typescript/#streamoptions","title":"<code>StreamOptions</code>","text":""},{"location":"typescript/#optionsinit","title":"<code>OptionsInit</code>","text":""},{"location":"typescript/#extendoptions","title":"<code>ExtendOptions</code>","text":""},{"location":"typescript/#plainresponse","title":"<code>PlainResponse</code>","text":""},{"location":"typescript/#responset-unknown","title":"<code>Response&lt;T = unknown&gt;</code>","text":""},{"location":"typescript/#request","title":"<code>Request</code>","text":""},{"location":"typescript/#requesteventst","title":"<code>RequestEvents&lt;T&gt;</code>","text":""},{"location":"typescript/#progress","title":"<code>Progress</code>","text":""},{"location":"typescript/#instancedefaults","title":"<code>InstanceDefaults</code>","text":""},{"location":"typescript/#gotreturn","title":"<code>GotReturn</code>","text":""},{"location":"typescript/#handlerfunction","title":"<code>HandlerFunction</code>","text":""},{"location":"typescript/#cancelablerequestt-extends-response-responsebody-responsebody","title":"<code>CancelableRequest&lt;T extends Response | Response['body'] = Response['body']&gt;</code>","text":""},{"location":"typescript/#delays","title":"<code>Delays</code>","text":""},{"location":"typescript/#createconnectionfunction","title":"<code>CreateConnectionFunction</code>","text":""},{"location":"typescript/#checkserveridentityfunction","title":"<code>CheckServerIdentityFunction</code>","text":""},{"location":"typescript/#cacheoptions","title":"<code>CacheOptions</code>","text":""},{"location":"typescript/#httpsoptions","title":"<code>HttpsOptions</code>","text":""},{"location":"typescript/#paginatedatabodytype-elementtype","title":"<code>PaginateData&lt;BodyType, ElementType&gt;</code>","text":""},{"location":"typescript/#paginationoptionselementtype-bodytype","title":"<code>PaginationOptions&lt;ElementType, BodyType&gt;</code>","text":""},{"location":"typescript/#searchparameters","title":"<code>SearchParameters</code>","text":""},{"location":"typescript/#responsetype","title":"<code>ResponseType</code>","text":""},{"location":"typescript/#filterdataelementtype","title":"<code>FilterData&lt;ElementType&gt;</code>","text":""},{"location":"typescript/#retryobject","title":"<code>RetryObject</code>","text":""},{"location":"typescript/#retryfunction","title":"<code>RetryFunction</code>","text":""},{"location":"typescript/#parsejsonfunction","title":"<code>ParseJsonFunction</code>","text":""},{"location":"typescript/#stringifyjsonfunction","title":"<code>StringifyJsonFunction</code>","text":""},{"location":"typescript/#method","title":"<code>Method</code>","text":""},{"location":"typescript/#toughcookiejar","title":"<code>ToughCookieJar</code>","text":""},{"location":"typescript/#promisecookiejar","title":"<code>PromiseCookieJar</code>","text":""},{"location":"typescript/#dnslookupipversion","title":"<code>DnsLookupIpVersion</code>","text":""},{"location":"typescript/#requestfunction","title":"<code>RequestFunction</code>","text":""},{"location":"typescript/#agents","title":"<code>Agents</code>","text":""},{"location":"typescript/#headers","title":"<code>Headers</code>","text":""},{"location":"typescript/#hooks","title":"<code>Hooks</code>","text":""},{"location":"typescript/#inithook","title":"<code>InitHook</code>","text":""},{"location":"typescript/#beforerequesthook","title":"<code>BeforeRequestHook</code>","text":""},{"location":"typescript/#beforeredirecthook","title":"<code>BeforeRedirectHook</code>","text":""},{"location":"typescript/#beforeerrorhook","title":"<code>BeforeErrorHook</code>","text":""},{"location":"typescript/#beforeretryhook","title":"<code>BeforeRetryHook</code>","text":""},{"location":"typescript/#afterresponsehook","title":"<code>AfterResponseHook</code>","text":""},{"location":"examples/","title":"\u4e3e\u4f8b","text":"<ul> <li>\u9ad8\u7ea7\u521b\u4f5c</li> <li>github \u6269\u5c55</li> <li>h2c</li> <li>\u5206\u9875</li> <li>runkit</li> <li>uppercase</li> </ul>"},{"location":"examples/advanced-creation/","title":"\u5148\u8fdb\u7684\u521b\u9020","text":"<pre><code>import got from '../../dist/source/index.js';\n/*\n* Got supports composing multiple instances together. This is very powerful.\n*\n* You can create a client that limits download speed,\n*   then compose it with an instance that signs a request.\n*\n* It's like plugins without any of the plugin mess.\n* You just create instances and then compose them together.\n*\n* To mix them use `instanceA.extend(instanceB, instanceC, ...)`, that's all.\n* Let's begin.\n*/\n// Logging all `got(\u2026)` calls\nconst logger = got.extend({\nhandlers: [\n(options, next) =&gt; {\nconsole.log(`Sending ${options.method} to ${options.url}`);\nreturn next(options);\n}\n]\n});\n// Denying redirects to foreign hosts\nconst controlRedirects = got.extend({\nhooks: {\nbeforeRedirect: [\n(options, response) =&gt; {\nconst {origin} = response.request.options.url;\nif (options.url.origin !== origin) {\nthrow new Error(`Redirection to ${options.url.origin} is not allowed from ${origin}`);\n}\n}\n]\n}\n});\n// Limiting download &amp; upload size\n// This can prevent crashing due to insufficient memory\nconst limitDownloadUpload = got.extend({\nhandlers: [\n(options, next) =&gt; {\nconst {downloadLimit, uploadLimit} = options.context;\nlet promiseOrStream = next(options);\n// A destroy function that supports both promises and streams\nconst destroy = message =&gt; {\nif (options.isStream) {\npromiseOrStream.destroy(new Error(message));\nreturn;\n}\npromiseOrStream.cancel(message);\n};\nif (typeof downloadLimit === 'number') {\npromiseOrStream.on('downloadProgress', progress =&gt; {\nif (progress.transferred &gt; downloadLimit &amp;&amp; progress.percent !== 1) {\ndestroy(`Exceeded the download limit of ${downloadLimit} bytes`);\n}\n});\n}\nif (typeof uploadLimit === 'number') {\npromiseOrStream.on('uploadProgress', progress =&gt; {\nif (progress.transferred &gt; uploadLimit &amp;&amp; progress.percent !== 1) {\ndestroy(`Exceeded the upload limit of ${uploadLimit} bytes`);\n}\n});\n}\nreturn promiseOrStream;\n}\n]\n});\n// No user agent\nconst noUserAgent = got.extend({\nheaders: {\n'user-agent': undefined\n}\n});\n// Custom endpoint\nconst httpbin = got.extend({\nprefixUrl: 'https://httpbin.org/'\n});\n// Signing requests\nimport crypto from 'node:crypto';\nconst getMessageSignature = (data, secret) =&gt; crypto.createHmac('sha256', secret).update(data).digest('hex').toUpperCase();\nconst signRequest = got.extend({\nhooks: {\nbeforeRequest: [\noptions =&gt; {\nconst secret = options.context.secret ?? process.env.SECRET;\nif (secret) {\noptions.headers['sign'] = getMessageSignature(options.body ?? '', secret);\n}\n}\n]\n}\n});\n/*\n* Putting it all together\n*/\nconst merged = got.extend(\nnoUserAgent,\nlogger,\nlimitDownloadUpload,\nhttpbin,\nsignRequest,\ncontrolRedirects\n);\n// There's no 'user-agent' header :)\nconst {headers} = await merged.post('anything', {\nbody: 'foobar',\ncontext: {\nsecret: 'password'\n}\n}).json();\nconsole.log(headers);\n// Sending POST to https://httpbin.org/anything\n// {\n//   Accept: 'application/json',\n//   'Accept-Encoding': 'gzip, deflate, br',\n//   'Content-Length': '6',\n//   Host: 'httpbin.org',\n//   Sign: 'EB0167A1EBF205510BAFF5DA1465537944225F0E0140E1880B746F361FF11DCA'\n// }\nconst MEGABYTE = 1048576;\nawait merged('https://pop-iso.sfo2.cdn.digitaloceanspaces.com/21.04/amd64/intel/5/pop-os_21.04_amd64_intel_5.iso', {\ncontext: {\ndownloadLimit: MEGABYTE\n},\nprefixUrl: ''\n});\n// CancelError: Exceeded the download limit of 1048576 bytes\n</code></pre>"},{"location":"examples/gh-got/","title":"Github","text":"<pre><code>import got from '../../dist/source/index.js';\nconst packageJson = {\nname: 'gh-got',\nversion: '12.0.0'\n};\nconst getRateLimit = headers =&gt; ({\nlimit: Number.parseInt(headers['x-ratelimit-limit'], 10),\nremaining: Number.parseInt(headers['x-ratelimit-remaining'], 10),\nreset: new Date(Number.parseInt(headers['x-ratelimit-reset'], 10) * 1000)\n});\nconst instance = got.extend({\nprefixUrl: 'https://api.github.com',\nheaders: {\naccept: 'application/vnd.github.v3+json',\n'user-agent': `${packageJson.name}/${packageJson.version}`\n},\nresponseType: 'json',\ncontext: {\ntoken: process.env.GITHUB_TOKEN,\n},\nhooks: {\ninit: [\n(raw, options) =&gt; {\nif ('token' in raw) {\noptions.context.token = raw.token;\ndelete raw.token;\n}\n}\n]\n},\nhandlers: [\n(options, next) =&gt; {\n// Authorization\nconst {token} = options.context;\nif (token &amp;&amp; !options.headers.authorization) {\noptions.headers.authorization = `token ${token}`;\n}\n// Don't touch streams\nif (options.isStream) {\nreturn next(options);\n}\n// Magic begins\nreturn (async () =&gt; {\ntry {\nconst response = await next(options);\n// Rate limit for the Response object\nresponse.rateLimit = getRateLimit(response.headers);\nreturn response;\n} catch (error) {\nconst {response} = error;\n// Nicer errors\nif (response &amp;&amp; response.body) {\nerror.name = 'GitHubError';\nerror.message = `${response.body.message} (${response.statusCode} status code)`;\n}\n// Rate limit for errors\nif (response) {\nerror.rateLimit = getRateLimit(response.headers);\n}\nthrow error;\n}\n})();\n}\n]\n});\nexport default instance;\n</code></pre>"},{"location":"examples/h2c/","title":"h2c","text":"<pre><code>import http2 from 'http2-wrapper';\nimport got from '../../dist/source/index.js';\nlet sessions = {};\nconst getSession = ({origin}) =&gt; {\nif (sessions[origin] &amp;&amp; !sessions[origin].destroyed) {\nreturn sessions[origin];\n}\nconst session = http2.connect(origin);\nsession.once('error', () =&gt; {\ndelete sessions[origin];\n});\nsessions[origin] = session;\nreturn session;\n};\nconst closeSessions = () =&gt; {\nfor (const key in sessions) {\nsessions[key].close();\n}\nsessions = {};\n};\nconst instance = got.extend({\nhooks: {\nbeforeRequest: [\noptions =&gt; {\noptions.h2session = getSession(options.url);\noptions.http2 = true;\noptions.request = http2.request;\n}\n]\n}\n});\nconst server = http2.createServer((request, response) =&gt; {\nresponse.end('{}');\n});\nserver.listen(async () =&gt; {\nconst url = `http://localhost:${server.address().port}`;\nconst {body, headers} = await instance(url, {context: {h2c: true}});\nconsole.log(headers, body);\ncloseSessions();\nserver.close();\n});\n</code></pre>"},{"location":"examples/pagination/","title":"\u5206\u9875","text":"<pre><code>import got from '../../dist/source/index.js';\nimport Bourne from '@hapi/bourne';\nconst max = Date.now() - 1000 * 86400 * 7;\nconst iterator = got.paginate('https://api.github.com/repos/sindresorhus/got/commits', {\npagination: {\npaginate: ({response, currentItems}) =&gt; {\n// If there are no more data, finish.\nif (currentItems.length === 0) {\nreturn false;\n}\n// Get the current page number.\nconst {searchParams} = response.request.options;\nconst previousPage = Number(searchParams.get('page') ?? 1);\n// Update the page number by one.\nreturn {\nsearchParams: {\npage: previousPage + 1\n}\n};\n},\n// Using `Bourne` to prevent prototype pollution.\ntransform: response =&gt; Bourne.parse(response.body),\nfilter: ({item}) =&gt; {\n// Check if the commit time exceeds our range.\nconst date = new Date(item.commit.committer.date);\nconst end = date.getTime() - max &gt;= 0;\nreturn end;\n},\nshouldContinue: ({item}) =&gt; {\n// Check if the commit time exceeds our range.\nconst date = new Date(item.commit.committer.date);\nconst end = date.getTime() - max &gt;= 0;\nreturn end;\n},\n// We want only 50 results.\ncountLimit: 50,\n// Wait 1s before making another request to prevent API rate limiting.\nbackoff: 1000,\n// It is a good practice to set an upper limit of how many requests can be made.\n// This way we can avoid infinite loops.\nrequestLimit: 10,\n// In this case, we don't need to store all the items we receive.\n// They are processed immediately.\nstackAllItems: false\n}\n});\nconsole.log('Last 50 commits from now to week ago:');\nfor await (const item of iterator) {\nconsole.log(item.commit.message.split('\\n')[0]);\n}\n</code></pre>"},{"location":"examples/runkit-example/","title":"runkit","text":"<pre><code>import got from 'got';\nconst issUrl = 'http://api.open-notify.org/iss-now.json';\nconst {iss_position: issPosition} = await got(issUrl).json();\nconsole.log(issPosition);\n//=&gt; {latitude: '20.4956', longitude: '42.2216'}\n</code></pre>"},{"location":"examples/uppercase-headers/","title":"\u5927\u5199\u6807\u9898","text":"<pre><code>import http from 'node:http';\nimport got from '../../dist/source/index.js';\n// Wraps an existing Agent instance\nclass WrappedAgent {\nconstructor(agent) {\nthis.agent = agent;\n}\naddRequest(request, options) {\nreturn this.agent.addRequest(request, options);\n}\nget keepAlive() {\nreturn this.agent.keepAlive;\n}\nget maxSockets() {\nreturn this.agent.maxSockets;\n}\nget options() {\nreturn this.agent.options;\n}\nget defaultPort() {\nreturn this.agent.defaultPort;\n}\nget protocol() {\nreturn this.agent.protocol;\n}\n}\nclass TransformHeadersAgent extends WrappedAgent {\naddRequest(request, options) {\nconst headers = request.getHeaderNames();\nfor (const header of headers) {\nrequest.setHeader(this.transformHeader(header), request.getHeader(header));\n}\nreturn super.addRequest(request, options);\n}\ntransformHeader(header) {\nreturn header.split('-').map(part =&gt; {\nreturn part[0].toUpperCase() + part.slice(1);\n}).join('-');\n}\n}\nconst agent = new http.Agent({\nkeepAlive: true\n});\nconst wrappedAgent = new TransformHeadersAgent(agent);\nconst main = async () =&gt; {\nconst headers = await got(`http://localhost:${server.address().port}`, {\nagent: {\nhttp: wrappedAgent\n},\nheaders: {\nfoo: 'bar'\n}\n}).json();\nconsole.log(headers);\nagent.destroy();\nserver.close();\n};\nconst server = http.createServer((request, response) =&gt; {\nconst {rawHeaders} = request;\nconst headers = {};\nfor (let i = 0; i &lt; rawHeaders.length; i += 2) {\nheaders[rawHeaders[i]] = rawHeaders[i + 1];\n}\nresponse.end(JSON.stringify(headers));\n}).listen(0, main);\n</code></pre>"},{"location":"migration-guides/","title":"\u8fc1\u79fb\u5411\u5bfc","text":"<p>\u4f60\u53ef\u80fd\u8ba4\u4e3a\u8f6c\u6362\u592a\u96be\u4e86\uff0c\u4f46\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\u3002\ud83e\udd84</p>"},{"location":"migration-guides/axios/","title":"Axios","text":"<p>Axios\u4e0eGot\u975e\u5e38\u76f8\u4f3c\u3002\u533a\u522b\u5728\u4e8eAxios\u9996\u5148\u9488\u5bf9\u6d4f\u89c8\u5668\uff0c\u800cGot\u5219\u5145\u5206\u5229\u7528\u4e86Node.js\u7684\u7279\u6027\u3002</p>"},{"location":"migration-guides/axios/#_1","title":"\u5e38\u89c1\u7684\u9009\u9879","text":"<p>\u8fd9\u4e9b\u9009\u9879\u4e5f\u4fdd\u6301\u4e0d\u53d8:</p> <ul> <li><code>url</code></li> <li><code>method</code></li> <li><code>headers</code></li> <li><code>maxRedirects</code></li> <li><code>decompress</code></li> </ul>"},{"location":"migration-guides/axios/#_2","title":"\u91cd\u547d\u540d\u9009\u9879","text":"<p>\u6211\u4eec\u975e\u5e38\u5173\u5fc3\u53ef\u8bfb\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u91cd\u547d\u540d\u4e86\u8fd9\u4e9b\u9009\u9879:</p> <ul> <li><code>httpAgent</code> \u2192 <code>agent.http</code></li> <li><code>httpsAgent</code> \u2192 <code>agent.https</code></li> <li><code>socketPath</code> \u2192 <code>url</code></li> <li><code>responseEncoding</code> \u2192 <code>encoding</code></li> <li><code>auth.username</code> \u2192 <code>username</code></li> <li><code>auth.password</code> \u2192 <code>password</code></li> <li><code>data</code> \u2192 <code>body</code> / <code>json</code> / <code>form</code></li> <li><code>params</code> \u2192 <code>searchParams</code></li> </ul>"},{"location":"migration-guides/axios/#_3","title":"\u884c\u4e3a\u7684\u6539\u53d8","text":"<ul> <li><code>transformRequest</code> \u2192 <code>hooks.beforeRequest</code></li> <li>The API is different.</li> <li><code>transformResponse</code> \u2192 <code>hooks.afterResponse</code></li> <li>The API is different.</li> <li><code>baseUrl</code> \u2192 <code>prefixUrl</code></li> <li>The <code>prefixUrl</code> is always prepended to the <code>url</code>.</li> <li><code>timeout</code></li> <li>This option is now an object. You can now set timeouts on particular events!</li> <li><code>responseType</code></li> <li>Accepts <code>'text'</code>, <code>'json'</code> or <code>'buffer'</code>.</li> </ul>"},{"location":"migration-guides/axios/#_4","title":"\u7a81\u53d1\u7684\u53d8\u5316","text":"<ul> <li><code>onUploadProgress</code></li> <li>This option does not exist. Instead, use <code>got(\u2026).on('uploadProgress', \u2026)</code>.</li> <li><code>onDownloadProgress</code></li> <li>This option does not exist. Instead, use <code>got(\u2026).on('downloadProgress', \u2026)</code>.</li> <li><code>maxContentLength</code></li> <li>This option does not exist. Instead, use a handler.</li> <li><code>validateStatus</code></li> <li>This option does not exist. Got automatically validates the status according to the specification.</li> <li><code>proxy</code></li> <li>This option does not exist. You need to pass an <code>agent</code> instead.</li> <li><code>cancelToken</code></li> <li>This option does not exist, but will be implemented soon. For now, use <code>promise.cancel()</code> or <code>stream.destroy()</code>.</li> <li><code>paramsSerializer</code></li> <li>This option does not exist.</li> <li><code>maxBodyLength</code></li> <li>This option does not exist.</li> </ul>"},{"location":"migration-guides/axios/#_5","title":"\u54cd\u5e94","text":"<p>\u54cd\u5e94\u5bf9\u8c61\u4e5f\u4e0d\u540c:</p> <ul> <li><code>response.data</code> \u2192 <code>response.body</code></li> <li><code>response.status</code> \u2192 <code>response.statusCode</code></li> <li><code>response.statusText</code> \u2192 <code>response.statusMessage</code></li> <li><code>response.config</code> \u2192 <code>response.request.options</code></li> <li><code>response.request</code></li> <li>Returns a Got stream.</li> </ul> <p>The <code>response.headers</code> object remains the same.</p>"},{"location":"migration-guides/axios/#_6","title":"\u62e6\u622a\u5668","text":"<p>\u800c\u662f\u63d0\u4f9b\u4e86hooks\uff0c\u8fd9\u66f4\u7075\u6d3b\u3002</p>"},{"location":"migration-guides/axios/#_7","title":"\u9519\u8bef","text":"<p>\u9519\u8bef\u770b\u8d77\u6765\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u540c\u7684\u662f<code>error.request</code>\u8fd4\u56de\u4e00\u4e2aget\u6d41\u3002 \u6b64\u5916\uff0cGot\u8fd8\u63d0\u4f9b\u4e86\u66f4\u591a\u7ec6\u8282\uff0c\u4f7f\u8c03\u8bd5\u66f4\u5bb9\u6613\u3002</p>"},{"location":"migration-guides/axios/#_8","title":"\u53d6\u6d88","text":"<p>\u867d\u7136Got\u4e0d\u652f\u6301<code>AbortController</code>\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528<code>promise.cancel()</code>\u3002</p>"},{"location":"migration-guides/axios/#_9","title":"\u65b9\u4fbf\u7684\u65b9\u6cd5","text":"<p>\u65b9\u4fbf\u7684\u65b9\u6cd5\uff0c\u5982<code>axios.get(\u2026)</code>\u7b49\u4fdd\u6301\u4e0d\u53d8:<code>got.get(\u2026)</code>\u3002 \u800c\u4e0d\u662f<code>axios.create(\u2026)</code>\u4f7f\u7528 <code>got.extend(\u2026)</code>\u3002</p>"},{"location":"migration-guides/axios/#_10","title":"\u4f60\u53ef\u4ee5\u8d70\u4e86!","text":"<p>\u597d\u5427\uff0c\u4f60\u5df2\u7ecf\u8d70\u4e86\u8fd9\u4e48\u8fdc\u4e86   \u8bf7\u67e5\u770b\u6587\u6863\u3002\u503c\u5f97\u82b1\u65f6\u95f4\u8bfb\u4e00\u8bfb \u8fd9\u91cc\u6709\u4e00\u4e9b\u5f88\u597d\u7684\u5efa\u8bae(../tips.md)\u3002</p> <p>\u5982\u679c\u6709\u4e9b\u4e8b\u60c5\u4e0d\u6e05\u695a\u6216\u6ca1\u6709\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e0d\u8981\u72b9\u8c6b\u63d0\u51fa\u95ee\u9898.</p>"},{"location":"migration-guides/nodejs/","title":"Node.js","text":"<p>\u8ba9\u6211\u4eec\u63d0\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u8bf7\u6c42\u3002\u5bf9\u4e8eNode.js\uff0c\u8fd9\u662f:</p> <pre><code>import http from \"node:http\";\nconst request = http.request(\"https://httpbin.org/anything\", (response) =&gt; {\nif (response.statusCode &gt;= 400) {\nrequest.destroy(new Error());\nreturn;\n}\nconst chunks = [];\nresponse.on(\"data\", (chunk) =&gt; {\nchunks.push(chunk);\n});\nresponse.once(\"end\", () =&gt; {\nconst buffer = Buffer.concat(chunks);\nif (response.statusCode &gt;= 400) {\nconst error = new Error(`Unsuccessful response: ${response.statusCode}`);\nerror.body = buffer.toString();\nreturn;\n}\nconst text = buffer.toString();\nconsole.log(text);\n});\nresponse.once(\"error\", console.error);\n});\nrequest.once(\"error\", console.error);\nrequest.end();\n</code></pre> <p>\u4f7f\u7528 Got, \u8fd9\u5c31\u53d8\u6210\u4e86:</p> <pre><code>import got from \"got\";\ntry {\nconst { body } = await got(\"https://httpbin.org/anything\");\nconsole.log(body);\n} catch (error) {\nconsole.error(error);\n}\n</code></pre> <p>\u66f4\u52a0\u6e05\u6670\u3002\u4f46\u662f\u6d41\u5462?</p> <pre><code>import http from \"node:http\";\nimport fs from \"node:fs\";\nconst source = fs.createReadStream(\"article.txt\");\nconst request = http.request(\n\"https://httpbin.org/anything\",\n{\nmethod: \"POST\",\n},\n(response) =&gt; {\nresponse.pipe(fs.createWriteStream(\"httpbin.txt\"));\n}\n);\nsource.pipe(request);\n</code></pre> <p>\u55ef\uff0c\u5c31\u8fd9\u4e48\u7b80\u5355:</p> <pre><code>import got from \"got\";\nimport stream from \"node:stream\";\nimport fs from \"node:fs\";\nawait stream.promises.pipeline(\nfs.createReadStream(\"article.txt\"),\ngot.stream.post(\"https://httpbin.org/anything\"),\nfs.createWriteStream(\"httpbin.txt\")\n);\n</code></pre> <p>\u4f18\u70b9\u662fGot\u8fd8\u81ea\u52a8\u5904\u7406\u9519\u8bef\uff0c\u56e0\u6b64\u60a8\u4e0d\u5fc5\u521b\u5efa\u81ea\u5b9a\u4e49\u4fa6\u542c\u5668\u3002</p> <p>\u6b64\u5916\uff0cGot\u8fd8\u652f\u6301\u91cd\u5b9a\u5411\u3001\u538b\u7f29\u3001\u9ad8\u7ea7\u8d85\u65f6\u3001\u7f13\u5b58\u3001\u5206\u9875\u3001cookie\u3001\u94a9\u5b50\u7b49\u7b49!</p>"},{"location":"migration-guides/nodejs/#_1","title":"\u4e0b\u4e00\u4e2a\u4ec0\u4e48?","text":"<p>\u4e0d\u5e78\u7684\u662f\uff0cGot\u9009\u9879\u4e0eNode.js\u9009\u9879\u5dee\u522b\u592a\u5927\u3002\u63d0\u4f9b\u4e00\u4e2a\u7b80\u77ed\u7684\u603b\u7ed3\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u522b\u62c5\u5fc3\uff0c\u4f60\u4f1a\u5f88\u5feb\u5b66\u4f1a\u7684\u2014\u2014\u5b83\u4eec\u5f88\u5bb9\u6613\u7406\u89e3!\u6bcf\u4e2a\u9009\u9879\u90fd\u9644\u6709\u793a\u4f8b\u3002</p> <p>\u8bf7\u67e5\u770b\u6587\u6863\u3002 \u503c\u5f97\u82b1\u65f6\u95f4\u53bb\u8bfb\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u5f88\u597d\u7684\u5efa\u8bae(../tips.md)\u3002</p> <p>\u5982\u679c\u6709\u4e9b\u4e8b\u60c5\u4e0d\u6e05\u695a\u6216\u6ca1\u6709\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e0d\u8981\u72b9\u8c6b\u63d0\u51fa\u95ee\u9898.</p>"},{"location":"migration-guides/request/","title":"Request","text":"<p>\u8ba9\u6211\u4eec\u4ee5Request's readme\u4e2d\u7684\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e3a\u4f8b:</p> <pre><code>import request from \"request\";\nrequest(\"https://google.com\", (error, response, body) =&gt; {\nconsole.log(\"error:\", error);\nconsole.log(\"statusCode:\", response &amp;&amp; response.statusCode);\nconsole.log(\"body:\", body);\n});\n</code></pre> <p>\u5bf9\u4e8e Got\uff0c\u5b83\u662f:</p> <pre><code>import got from \"got\";\ntry {\nconst response = await got(\"https://google.com\");\nconsole.log(\"statusCode:\", response.statusCode);\nconsole.log(\"body:\", response.body);\n} catch (error) {\nconsole.log(\"error:\", error);\n}\n</code></pre> <p>\u73b0\u5728\u770b\u8d77\u6765\u597d\u591a\u4e86\uff0c\u662f\u5427? \ud83d\ude0e</p>"},{"location":"migration-guides/request/#_1","title":"\u5e38\u89c1\u7684\u9009\u9879","text":"<p>\u8fd9\u4e9b Got \u9009\u9879\u4e0e Request \u76f8\u540c:</p> <ul> <li><code>url</code></li> <li><code>body</code></li> <li><code>followRedirect</code></li> <li><code>encoding</code></li> <li><code>maxRedirects</code></li> <li><code>localAddress</code></li> <li><code>headers</code></li> <li><code>createConnection</code></li> <li>UNIX sockets: <code>http://unix:SOCKET:PATH</code></li> </ul> <p><code>time</code> \u9009\u9879\u4e0d\u5b58\u5728\uff0c\u5047\u8bbe\u5b83\u603b\u662f\u6b63\u786e.</p> <p>\u5982\u679c\u4f60\u719f\u6089\u8fd9\u4e9b\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u4e86\u3002</p>"},{"location":"migration-guides/request/#_2","title":"\u91cd\u547d\u540d\u9009\u9879","text":"<p>Note</p> <p>\u5f97\u5230\u5b58\u50a8HTTPS\u9009\u9879\u5728<code>httpoptions</code>\u3002\u5176\u4e2d\u4e00\u4e9b\u5df2\u7ecf\u88ab\u91cd\u65b0\u547d\u540d\u3002 \u4e86\u89e3\u66f4\u591a.</p> <p>\u53ef\u8bfb\u6027\u5bf9\u6211\u4eec\u6765\u8bf4\u975e\u5e38\u91cd\u8981\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u8fd9\u4e9b\u9009\u9879\u6709\u4e0d\u540c\u7684\u540d\u79f0:</p> <ul> <li><code>qs</code> \u2192 <code>searchParams</code></li> <li><code>strictSSL</code> \u2192 <code>rejectUnauthorized</code></li> <li><code>gzip</code> \u2192 <code>decompress</code></li> <li><code>jar</code> \u2192 <code>cookieJar</code> (accepts <code>tough-cookie</code> jar)</li> <li><code>jsonReviver</code> \u2192 <code>parseJson</code></li> <li><code>jsonReplacer</code> \u2192 <code>stringifyJson</code></li> </ul>"},{"location":"migration-guides/request/#_3","title":"\u884c\u4e3a\u53d8\u5316","text":"<ul> <li>The <code>agent</code> option is now an object with <code>http</code>, <code>https</code> and <code>http2</code> properties.</li> <li>The <code>timeout</code> option is now an object. You can set timeouts on particular events!</li> <li>The <code>searchParams</code> option is always serialized using <code>URLSearchParams</code>.</li> <li>In order to pass a custom query string, provide it with the <code>url</code> option. <code>got('https://example.com', {searchParams: {test: ''}})</code> \u2192 <code>https://example.com/?test=</code> <code>got('https://example.com/?test')</code> \u2192 <code>https://example.com/?test</code></li> <li>To use streams, call <code>got.stream(url, options)</code> or <code>got(url, {\u2026, isStream: true})</code>.</li> </ul>"},{"location":"migration-guides/request/#_4","title":"\u7a81\u53d1\u7684\u53d8\u5316","text":"<ul> <li>The <code>json</code> option is not a <code>boolean</code>, it's an <code>object</code>. It will be stringified and used as a body.</li> <li>The <code>form</code> option is an <code>object</code> and will be used as <code>application/x-www-form-urlencoded</code> body.</li> <li>All headers are converted to lowercase.   According to the spec, the headers are case-insensitive.</li> <li>No <code>oauth</code> / <code>hawk</code> / <code>aws</code> / <code>httpSignature</code> option.   To sign requests, you need to create a custom instance.</li> <li>No <code>agentClass</code> / <code>agentOptions</code> / <code>pool</code> option.</li> <li>No <code>forever</code> option.   You need to pass an agent with <code>keepAlive</code> option set to <code>true</code>.</li> <li>No <code>proxy</code> option. You need to pass a custom agent.</li> <li>No <code>auth</code> option.   You need to use <code>username</code> / <code>password</code> instead or set the <code>authorization</code> header manually.</li> <li>No <code>baseUrl</code> option.   Instead, there is <code>prefixUrl</code> which appends a trailing slash if not present.</li> <li>No <code>removeRefererHeader</code> option.   You can remove the <code>referer</code> header in a <code>beforeRequest</code> hook.</li> <li>No <code>followAllRedirects</code> option.</li> </ul> <p>Hooks are very powerful. Read more to see what else you achieve using hooks.</p>"},{"location":"migration-guides/request/#_5","title":"\u5173\u4e8e\u6d41\u7684\u66f4\u591a\u4fe1\u606f","text":"<p>\u8ba9\u6211\u4eec\u5feb\u901f\u770b\u4e00\u4e0b Request \u81ea\u8ff0\u4e2d\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50:</p> <pre><code>http.createServer((serverRequest, serverResponse) =&gt; {\nif (serverRequest.url === \"/doodle.png\") {\nserverRequest\n.pipe(request(\"https://example.com/doodle.png\"))\n.pipe(serverResponse);\n}\n});\n</code></pre> <p>\u8fd9\u91cc\u5f88\u9177\u7684\u7279\u6027\u662f Request \u53ef\u4ee5\u7528\u6d41\u4ee3\u7406\u62a5\u5934\uff0c\u4f46 Got \u4e5f\u53ef\u4ee5\u8fd9\u6837\u505a!</p> <pre><code>import { promisify } from \"node:util\";\nimport stream from \"node:stream\";\nimport got from \"got\";\nconst pipeline = promisify(stream.pipeline);\nconst server = http.createServer(async (serverRequest, serverResponse) =&gt; {\nif (serverRequest.url === \"/doodle.png\") {\nawait pipeline(\ngot.stream(\"https://example.com/doodle.png\"),\nserverResponse\n);\n}\n});\nserver.listen(8080);\n</code></pre> <p>\u5c31\u6d41\u800c\u8a00\uff0c\u4ec0\u4e48\u90fd\u6ca1\u6709\u771f\u6b63\u6539\u53d8\u3002</p>"},{"location":"migration-guides/request/#_6","title":"\u65b9\u4fbf\u7684\u65b9\u6cd5","text":"<ul> <li>If you were using <code>request.get</code>, <code>request.post</code>, and so on - you can do the same with Got.</li> <li>The <code>request.defaults({\u2026})</code> method has been renamed. You can do the same with <code>got.extend({\u2026})</code>.</li> <li>There is no <code>request.cookie()</code> nor <code>request.jar()</code>. You have to use <code>tough-cookie</code> directly.</li> </ul>"},{"location":"migration-guides/request/#_7","title":"\u4f60\u53ef\u4ee5\u5f00\u59cb\u4e86!","text":"<p>\u597d\u5427\uff0c\u4f60\u5df2\u7ecf\u8d70\u4e86\u8fd9\u4e48\u8fdc \u770b\u4e00\u4e0b\u6587\u6863\u3002\u503c\u5f97\u82b1\u65f6\u95f4\u8bfb\u4e00\u8bfb\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u5f88\u68d2\u7684\u5efa\u8bae\u3002</p> <p>\u5982\u679c\u67d0\u4ef6\u4e8b\u4e0d\u6e05\u695a\u6216\u6ca1\u6709\u6309\u7167\u5b83\u5e94\u8be5\u7684\u65b9\u5f0f\u8fd0\u884c\uff0c\u4e0d\u8981\u72b9\u8c6b\u6253\u5f00\u4e00\u4e2a\u95ee\u9898.</p>"},{"location":"tags/","title":"\u6807\u7b7e","text":""}]}